(self.webpackChunk_ant_design_react_native=self.webpackChunk_ant_design_react_native||[]).push([[9436],{93132:n=>{n.exports={content:["article",["p","Use to show important information for the system, and ask for user feedback. eg: When deleting an important content, pop up a Modal for secondary confirmation."],["h3","Rules"],["ul",["li",["p","Use as few as possible. Modal will interrupt user operation, only use it at important situation."]],["li",["p","Title should be concise, do not exceed 1 line; description should be concise and complete, generally no more than 2 lines."]],["li",["p","Operation buttons are up to 3(vertical), generally 1-2(horizontal); ",["a",{title:null,href:"/components/action-sheet"},"ActionSheet"]," is preferred when there are more than 3 actions."]],["li",["p","Generally put the most likely clicked button on the right side. In addition, the cancel button should always be on the left."]]],["h2","API"],["h3","Modal"],["table",["thead",["tr",["th","Properties"],["th","Descrition"],["th","Type"],["th","Default"],["th","Version"]]],["tbody",["tr",["td","visible"],["td","Determine whether a modal dialog is visible or not"],["td","Boolean"],["td","false"],["td"]],["tr",["td","closable"],["td","Determine whether a close (x) button is visible or not"],["td","Boolean"],["td","false"],["td"]],["tr",["td","maskClosable"],["td","Determine whether to close the modal dialog when clicked mask of it"],["td","Boolean"],["td","true"],["td"]],["tr",["td","onClose"],["td","Callback for clicking close icon x or mask"],["td","(): void"],["td","-"],["td"]],["tr",["td","transparent"],["td","transparent mode or full screen mode"],["td","Boolean"],["td","false"],["td"]],["tr",["td","popup"],["td","popup mode"],["td","Boolean"],["td","false"],["td"]],["tr",["td","animationDuration"],["td","Animation duration, in ms"],["td","Number"],["td","300"],["td",["code","5.3.0"]]],["tr",["td","animationType"],["td","Options: 'fade' / 'slide'"],["td","String"],["td"],["td","fade"]],["tr",["td","modalType"],["td","The type of the popup. ",["br"],"When it is ",["code","'portal'"],", it is inserted from the ",["code","<Provider />"]," root node (default). ",["br"],"When it is ",["code","'modal'"],", it is the same as ",["a",{title:null,href:"https://reactnative.dev/docs/modal"},["code","react-native/Modal"]]," (used to get the current context). ",["br"],"When it is ",["code","'view'"],", it is the same as ",["code","react-native/View"]," (used to nest popups in popups)."],["td",["code","'portal'"]],["td",["code","'modal'"]],["td",["code","'view'"]],["td",["code","'portal'"]],["td",["code","5.3.0"]]],["tr",["td","title"],["td","title"],["td","React.Element"],["td","-"],["td"]],["tr",["td","footer"],["td","footer content"],["td","Array ",["span","{text, onPress}"]],["td","[]"],["td"]],["tr",["td","onRequestClose"],["td","The ",["code","onRequestClose"]," callback is called when the user taps the hardware back button on Android or the menu button on Apple TV. Returns ",["code","true"]," to prevent ",["code","BackHandler"]," events when modal is open."],["td","(): boolean"],["td","false"],["td"]],["tr",["td","style"],["td","style same as ",["code","styles.innerContainer"]],["td",["code","ViewStyle"]],["td","-"],["td"]],["tr",["td","styles"],["td","Semantic DOM style"],["td",["a",{title:null,href:"#modalstyle-interface"},"ModalStyle"]],["td","-"],["td"]]]],["h3","ModalStyle interface"],["pre",{lang:"typescript",highlighted:'<span class="token keyword">interface</span> <span class="token class-name">ModalStyle</span> <span class="token punctuation">{</span>\n  container<span class="token punctuation">:</span> ViewStyle      <span class="token comment" spellcheck="true">// Set `z-index`</span>\n  wrap<span class="token punctuation">:</span> ViewStyle           <span class="token comment" spellcheck="true">// Set modal flex layout: `{justifyContent: \'center\',alignItems: \'center\'}`</span>\n  innerContainer<span class="token punctuation">:</span> ViewStyle <span class="token comment" spellcheck="true">// modal content view, default: `{ widh:286 }`</span>\n  \n  <span class="token comment" spellcheck="true">// modal content fields</span>\n  footer<span class="token punctuation">:</span> ViewStyle\n  header<span class="token punctuation">:</span> TextStyle\n  body<span class="token punctuation">:</span> ViewStyle\n  closeWrap<span class="token punctuation">:</span> ViewStyle\n  close<span class="token punctuation">:</span> TextStyle\n  buttonGroupH<span class="token punctuation">:</span> ViewStyle\n  buttonGroupV<span class="token punctuation">:</span> ViewStyle\n  buttonWrapH<span class="token punctuation">:</span> ViewStyle\n  buttonWrapV<span class="token punctuation">:</span> ViewStyle\n  buttonText<span class="token punctuation">:</span> TextStyle\n\n  <span class="token comment" spellcheck="true">// popup</span>\n  popupContainer<span class="token punctuation">:</span> ViewStyle\n  popupSlideUp<span class="token punctuation">:</span> ViewStyle\n  popupSlideDown<span class="token punctuation">:</span> ViewStyle\n  <span class="token comment" spellcheck="true">// operation</span>\n  operationContainer<span class="token punctuation">:</span> ViewStyle\n  operationBody<span class="token punctuation">:</span> ViewStyle\n  buttonTextOperation<span class="token punctuation">:</span> TextStyle\n<span class="token punctuation">}</span>'},["code","interface ModalStyle {\n  container: ViewStyle      // Set `z-index`\n  wrap: ViewStyle           // Set modal flex layout: `{justifyContent: 'center',alignItems: 'center'}`\n  innerContainer: ViewStyle // modal content view, default: `{ widh:286 }`\n  \n  // modal content fields\n  footer: ViewStyle\n  header: TextStyle\n  body: ViewStyle\n  closeWrap: ViewStyle\n  close: TextStyle\n  buttonGroupH: ViewStyle\n  buttonGroupV: ViewStyle\n  buttonWrapH: ViewStyle\n  buttonWrapV: ViewStyle\n  buttonText: TextStyle\n\n  // popup\n  popupContainer: ViewStyle\n  popupSlideUp: ViewStyle\n  popupSlideDown: ViewStyle\n  // operation\n  operationContainer: ViewStyle\n  operationBody: ViewStyle\n  buttonTextOperation: TextStyle\n}"]],["h3","Modal.useModal()"],["p","When you need using Context, you can use ",["code","contextHolder"]," which created by ",["code","Modal.useModal"]," to insert into children. Modal created by hooks will get all the context where ",["code","contextHolder"]," are. Created ",["code","modal"]," has the same creating function with ",["a",{title:null,href:"#static-method"},["code","Modal.method"]],"(Static method)."],["pre",{lang:"jsx",highlighted:'<span class="token keyword">const</span> <span class="token punctuation">[</span>modal<span class="token punctuation">,</span> contextHolder<span class="token punctuation">]</span> <span class="token operator">=</span> Modal<span class="token punctuation">.</span><span class="token function">useModal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nReact<span class="token punctuation">.</span><span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>\n  modal<span class="token punctuation">.</span><span class="token function">alert</span><span class="token punctuation">(</span>\n    <span class="token comment" spellcheck="true">// ...</span>\n  <span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>View</span><span class="token punctuation">></span></span><span class="token punctuation">{</span>contextHolder<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>View</span><span class="token punctuation">></span></span><span class="token punctuation">;</span>'},["code","const [modal, contextHolder] = Modal.useModal();\n\nReact.useEffect(() => {\n  modal.alert(\n    // ...\n  );\n}, []);\n\nreturn <View>{contextHolder}</View>;"]],["h2","Static method"],["h3","Modal.alert(title, message, actions?)"],["table",["thead",["tr",["th","Properties"],["th","Descrition"],["th","Type"],["th","Default"]]],["tbody",["tr",["td","title"],["td","title"],["td","String or React.Element"],["td","-"]],["tr",["td","message"],["td","message"],["td","String or React.Element"],["td","-"]],["tr",["td","actions"],["td","button group, ",["span","{text, onPress, style}"]],["td","Array"],["td","-"]],["tr",["td","onBackHandler"],["td","Callback of the back key (not required), returns true to close modal, false to prevent modal from closing"],["td","(): boolean"],["td","æ— "]]]],["h3","Modal.prompt(title, message, callbackOrActions, type?, defaultValue?)"],["table",["thead",["tr",["th","Properties"],["th","Descrition"],["th","Type"],["th","Default"]]],["tbody",["tr",["td","title"],["td","title"],["td","String or React.Element"],["td","-"]],["tr",["td","message"],["td","message"],["td","String or React.Element"],["td","-"]],["tr",["td","callbackOrActions"],["td","button group ",["span","{text, onPress}"]," or callback"],["td","Array or Function"],["td","-"]],["tr",["td","type"],["td","prompt style"],["td","String (",["code","default"],", ",["code","secure-text"],", ",["code","login-password"],")"],["td",["code","default"]]],["tr",["td","defaultValue"],["td","Default(input whick type is password is not supported)"],["td","String"],["td","-"]],["tr",["td","placeholders"],["td",["span","'', ''"]],["td","String[]"],["td","-"]],["tr",["td","onBackHandler"],["td","Callback of the back key (not required), returns true to close modal, false to prevent modal from closing"],["td","(): boolean"],["td","æ— "]]]],["h3","Modal.operation(actions?, onBackHandler?)"],["table",["thead",["tr",["th","Properties"],["th","Descrition"],["th","Type"],["th","Default"]]],["tbody",["tr",["td","actions"],["td","button group, ",["span","{text, onPress, style}"]],["td","Array"],["td","-"]],["tr",["td","onBackHandler"],["td","Callback of the back key (not required), returns true to close modal, false to prevent modal from closing"],["td","(): boolean"],["td","æ— "]]]],["h2","FAQ"],["h3","How to close the static Modal.method()?"],["p","You need to use ",["code","Portal.remove(key)"]," method; Take ",["code","Modal.alert"]," as an example"],["pre",{lang:"jsx",highlighted:'<span class="token keyword">import</span> <span class="token punctuation">{</span> Modal<span class="token punctuation">,</span> Portal <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'@ant-design/react-native\'</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> useRef <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'react\'</span>\n\n<span class="token keyword">function</span> <span class="token function">App</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> key <span class="token operator">=</span> <span class="token function">useRef</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n\n  <span class="token keyword">const</span> onOpen <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>\n    key<span class="token punctuation">.</span>current <span class="token operator">=</span> Modal<span class="token punctuation">.</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token keyword">const</span> onClose <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>\n    <span class="token comment" spellcheck="true">// close the Modal.alert</span>\n    Portal<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>'},["code","import { Modal, Portal } from '@ant-design/react-native'\nimport { useRef } from 'react'\n\nfunction App() {\n  const key = useRef()\n\n  const onOpen = () => {\n    key.current = Modal.alert({})\n  }\n\n  const onClose = () => {\n    // close the Modal.alert\n    Portal.remove(key)\n  }\n}"]],["p","When using ",["code","Modal.useModal"],", use the ",["code","modal.remove(key)"]," method:"],["pre",{lang:"jsx",highlighted:'<span class="token keyword">import</span> <span class="token punctuation">{</span> Modal<span class="token punctuation">,</span> Portal <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'@ant-design/react-native\'</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> useRef <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'react\'</span>\n\n<span class="token keyword">function</span> <span class="token function">App</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> <span class="token punctuation">[</span>modal<span class="token punctuation">,</span> contextHolder<span class="token punctuation">]</span> <span class="token operator">=</span> Modal<span class="token punctuation">.</span><span class="token function">useModal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n   <span class="token keyword">const</span> key <span class="token operator">=</span> <span class="token function">useRef</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n\n  <span class="token keyword">const</span> onOpen <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>\n    key<span class="token punctuation">.</span>current <span class="token operator">=</span> modal<span class="token punctuation">.</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token keyword">const</span> onClose <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>\n    <span class="token comment" spellcheck="true">// close the modal.alert</span>\n    modal<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token keyword">return</span> <span class="token punctuation">(</span>\n    <span class="token operator">&lt;</span><span class="token operator">></span>\n     <span class="token operator">...</span>\n     <span class="token punctuation">{</span>contextHolder<span class="token punctuation">}</span>\n    <span class="token operator">&lt;</span><span class="token operator">/</span><span class="token operator">></span>\n  <span class="token punctuation">)</span>\n<span class="token punctuation">}</span>'},["code","import { Modal, Portal } from '@ant-design/react-native'\nimport { useRef } from 'react'\n\nfunction App() {\n  const [modal, contextHolder] = Modal.useModal();\n   const key = useRef()\n\n  const onOpen = () => {\n    key.current = modal.alert({})\n  }\n\n  const onClose = () => {\n    // close the modal.alert\n    modal.remove(key)\n  }\n\n  return (\n    <>\n     ...\n     {contextHolder}\n    </>\n  )\n}"]],["h3","Why I can not access context,redux,useRouter in ",["code","<Modal />"]," or ",["code","Modal.xxx"],"?"],["p","Rendering ",["code","<Modal>"]," or calling Modal methods directly is dynamically inserted into the ",["code","<Provider>"]," root node through ",["code","Portal.add"]," by default. At this time, its context is different from the context of the current code, so the context information cannot be obtained."],["p","When you need context info, ",["br"],"\n",["strong","1."]," you can use ",["code","Modal.useModal"]," to get ",["code","modal"]," instance and ",["code","contextHolder"]," node. And put it in your children:"],["pre",{lang:"tsx",highlighted:'<span class="token keyword">const</span> <span class="token punctuation">[</span>modal<span class="token punctuation">,</span> contextHolder<span class="token punctuation">]</span> <span class="token operator">=</span> Modal<span class="token punctuation">.</span><span class="token function">useModal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">;</span>\n\n<span class="token operator">/</span><span class="token operator">/</span> <span class="token keyword">then</span> call modal<span class="token punctuation">.</span>confirm instead of Modal<span class="token punctuation">.</span>confirm\n\nreturn <span class="token punctuation">(</span>\n  <span class="token operator">&lt;</span>Context1<span class="token punctuation">.</span>Provider value<span class="token operator">=</span><span class="token string">"Ant"</span><span class="token operator">></span>\n    {<span class="token operator">/</span><span class="token operator">*</span> contextHolder is <span class="token keyword">in</span> Context1<span class="token punctuation">,</span> which means modal will get context of Context1 <span class="token operator">*</span><span class="token operator">/</span>}\n    {contextHolder}\n    <span class="token operator">&lt;</span>Context2<span class="token punctuation">.</span>Provider value<span class="token operator">=</span><span class="token string">"Design"</span><span class="token operator">></span>\n      {<span class="token operator">/</span><span class="token operator">*</span> contextHolder is out of Context2<span class="token punctuation">,</span> which means modal will <span class="token operator">not</span> get context of Context2 <span class="token operator">*</span><span class="token operator">/</span>}\n    <span class="token operator">&lt;</span><span class="token operator">/</span>Context2<span class="token punctuation">.</span>Provider<span class="token operator">></span>\n  <span class="token operator">&lt;</span><span class="token operator">/</span>Context1<span class="token punctuation">.</span>Provider<span class="token operator">></span>\n<span class="token punctuation">)</span><span class="token comment" spellcheck="true">;</span>'},["code",'const [modal, contextHolder] = Modal.useModal();\n\n// then call modal.confirm instead of Modal.confirm\n\nreturn (\n  <Context1.Provider value="Ant">\n    {/* contextHolder is in Context1, which means modal will get context of Context1 */}\n    {contextHolder}\n    <Context2.Provider value="Design">\n      {/* contextHolder is out of Context2, which means modal will not get context of Context2 */}\n    </Context2.Provider>\n  </Context1.Provider>\n);']],["p",["strong","Note"],": You must insert ",["code","contextHolder"]," into your children with hooks. You can use origin method if you do not need context connection."],["p",["strong","2."]," When using ",["code","<Modal />"],", by setting ",["code","modalType='modal'"],", the ",["strong","native Modal component"]," will be used internally to maintain the context:"],["pre",{lang:"tsx",highlighted:'<span class="token operator">&lt;</span>Modal modelType<span class="token operator">=</span><span class="token string">"modal"</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">></span>\n <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>\n<span class="token operator">&lt;</span><span class="token operator">/</span>Modal<span class="token operator">></span>'},["code",'<Modal modelType="modal" ...>\n ...\n</Modal>']]],meta:{category:"Components",type:"Feedback",title:"Modal",filename:"components/modal/index.en-US.md"}}}}]);