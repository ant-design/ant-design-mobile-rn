(self.webpackChunk_ant_design_react_native=self.webpackChunk_ant_design_react_native||[]).push([[4613],{62847:n=>{n.exports={content:["article",["p","High-performance form component with data domain management. Includes data entry, validation, and corresponding styles. Base on ",["a",{title:null,href:"https://www.npmjs.com/package/rc-field-form"},"rc-field-form"],"."],["p","Example from ",["a",{title:null,href:"https://ant.design/components/form-cn"},"https://ant.design/components/form-cn"]],["h2","When to use"],["ul",["li",["p","When you need to create an instance or collect information."]],["li",["p","When you need to validate fields in certain rules."]]],["h2","API"],["h3","Form"],["table",["thead",["tr",["th","Property"],["th","Description"],["th","Type"],["th","Default"]]],["tbody",["tr",["td","disabled"],["td","Set form component disable, only available for ",["code","@ant-design/react-native"]," components"],["td","boolean"],["td","false"]],["tr",["td","component"],["td","Set the Form rendering element. Do not create a ReactNode for ",["code","false"]],["td","ComponentType ","|"," false"],["td",["code","List"]]],["tr",["td","fields"],["td","Control of form fields through state management (such as redux). Not recommended for non-strong demand. View ",["a",{title:null,href:"https://ant.design/components/form#components-form-demo-global-state"},"example"]],["td",["a",{title:null,href:"#fielddata"},"FieldData"],"[","]"],["td","-"]],["tr",["td","form"],["td","Form control instance created by ",["code","Form.useForm()"],". Automatically created when not provided"],["td",["a",{title:null,href:"#forminstance"},"FormInstance"]],["td","-"]],["tr",["td","feedbackIcons"],["td","Can be passed custom icons while ",["code","Form.Item"]," element has ",["code","hasFeedback"]],["td",["a",{title:null,href:"#feedbackicons"},"FeedbackIcons"]],["td","-"]],["tr",["td","initialValues"],["td","Set value by Form initialization or reset"],["td","object"],["td","-"]],["tr",["td","labelStyle"],["td","The label style"],["td",["code","ViewStyle \\| TextStyle"]],["td","-"]],["tr",["td","layout"],["td","Form layout"],["td",["code","horizontal"]," ","|"," ",["code","vertical"]],["td",["code","horizontal"]]],["tr",["td","name"],["td","Form name. Will be the prefix of Field ",["code","id"]],["td","string"],["td","-"]],["tr",["td","preserve"],["td","Keep field value even when field removed. You can get the preserve field value by ",["code","getFieldsValue(true)"]],["td","boolean"],["td","true"]],["tr",["td","requiredMark"],["td","Required mark style. Can use required mark or optional mark. You can not config to single Form.Item since this is a Form level config"],["td","boolean ","|"," ",["code","optional"]," ","|"," ((label: ReactNode, info: { required: boolean }) => ReactNode)"],["td","true"]],["tr",["td","validateMessages"],["td","Validation prompt template, description ",["a",{title:null,href:"#validatemessages"},"see below"]],["td",["a",{title:null,href:"https://github.com/ant-design/ant-design/blob/6234509d18bac1ac60fbb3f92a5b2c6a6361295a/components/locale/en_US.ts#L88-L134"},"ValidateMessages"]],["td","-"]],["tr",["td","validateTrigger"],["td","Config field validate trigger"],["td","string ","|"," string","[","]"],["td",["code","onChange"]]],["tr",["td","wrapperStyle"],["td","The layout for input controls, same as ",["code","labelStyle"]],["td",["code","ViewStyle"]],["td","-"]],["tr",["td","onFieldsChange"],["td","Trigger when field updated"],["td","function(changedFields, allFields)"],["td","-"]],["tr",["td","onFinish"],["td","Trigger after submitting the form and verifying data successfully"],["td","function(values)"],["td","-"]],["tr",["td","onFinishFailed"],["td","Trigger after submitting the form and verifying data failed"],["td","function({ values, errorFields, outOfDate })"],["td","-"]],["tr",["td","onValuesChange"],["td","Trigger when value updated"],["td","function(changedValues, allValues)"],["td","-"]],["tr",["td","styles"],["td","Semantic DOM style"],["td","Same as ",["a",{title:null,href:"/components/list#liststyle-interface"},"ListStyle"]],["td","-"]]]],["h3","validateMessages"],["p","Form provides ",["a",{title:null,href:"https://github.com/ant-design/ant-design/blob/6234509d18bac1ac60fbb3f92a5b2c6a6361295a/components/locale/en_US.ts#L88-L134"},"default verification error messages"],". You can modify the template by configuring ",["code","validateMessages"]," property. A common usage is to configure localization:"],["pre",{lang:"jsx",highlighted:'<span class="token keyword">const</span> validateMessages <span class="token operator">=</span> <span class="token punctuation">{</span>\n  required<span class="token punctuation">:</span> <span class="token string">"\'${name}\' is required!"</span><span class="token punctuation">,</span>\n  <span class="token comment" spellcheck="true">// ...</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Form</span> <span class="token attr-name">validateMessages</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>validateMessages<span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span><span class="token punctuation">;</span>'},["code","const validateMessages = {\n  required: \"'${name}' is required!\",\n  // ...\n};\n\n<Form validateMessages={validateMessages} />;"]],["h2","Form.Item"],["p","Form field component for data bidirectional binding, validation, layout, and so on."],["table",["thead",["tr",["th","Property"],["th","Description"],["th","Type"],["th","Default"]]],["tbody",["tr",["td","dependencies"],["td","Set the dependency field. See ",["a",{title:null,href:"#dependencies"},"below"]],["td",["a",{title:null,href:"#namepath"},"NamePath"],"[","]"],["td","-"]],["tr",["td","getValueFromEvent"],["td","Specify how to get value from event or other onChange arguments"],["td","(..args: any","[","]) => any"],["td","-"]],["tr",["td","getValueProps"],["td","Additional props with sub component (It's not recommended to generate dynamic function prop by ",["code","getValueProps"],". Please pass it to child component directly)"],["td","(value: any) => Record<string, any>"],["td","-"]],["tr",["td","hasFeedback"],["td","Used with ",["code","validateStatus"],", this option specifies the validation status icon. Recommended to be used only with ",["code","Input"],". Also, It can get feedback icons via icons prop."],["td","boolean ","|"," { icons: ",["a",{title:null,href:"#feedbackicons"},"FeedbackIcons"]," }"],["td","false"]],["tr",["td","help"],["td","The prompt message. If not provided, the prompt message will be generated by the validation rule."],["td","ReactNode"],["td","-"]],["tr",["td","hidden"],["td","Whether to hide Form.Item (still collect and validate value)"],["td","boolean"],["td","false"]],["tr",["td","initialValue"],["td","Config sub default value. Form ",["code","initialValues"]," get higher priority when conflict"],["td","string"],["td","-"]],["tr",["td","label"],["td","Label text"],["td","ReactNode"],["td","-"]],["tr",["td","labelStyle"],["td","The label style. You can set ",["code","labelCol"]," on Form which will not affect nest Item. If both exists, use Item first"],["td",["code","ViewStyle \\| TextStyle"]],["td","-"]],["tr",["td","messageVariables"],["td","The default validate field info"],["td","Record","<","string, string>"],["td","-"]],["tr",["td","name"],["td","Field name, support array"],["td",["a",{title:null,href:"#namepath"},"NamePath"]],["td","-"]],["tr",["td","normalize"],["td","Normalize value from component value before passing to Form instance. Do not support async"],["td","(value, prevValue, prevValues) => any"],["td","-"]],["tr",["td","noStyle"],["td","No style for ",["code","true"],", used as a pure field control. Will inherit parent Form.Item ",["code","validateStatus"]," if self ",["code","validateStatus"]," not configured"],["td","boolean"],["td","false"]],["tr",["td","preserve"],["td","Keep field value even when field removed"],["td","boolean"],["td","true"]],["tr",["td","required"],["td","Display required style. It will be generated by the validation rule"],["td","boolean"],["td","false"]],["tr",["td","rules"],["td","Rules for field validation. Click ",["a",{title:null,href:"https://ant.design/components/form#components-form-demo-basic"},"here"]," to see an example"],["td",["a",{title:null,href:"#rule"},"Rule"],"[","]"],["td","-"]],["tr",["td","shouldUpdate"],["td","Custom field update logic. See ",["a",{title:null,href:"#shouldupdate"},"below"]],["td","boolean ","|"," (prevValue, curValue) => boolean"],["td","false"]],["tr",["td","styles"],["td","Semantic DOM style"],["td",["a",{title:null,href:"#formitemstyle-interface"},"FormItemStyle"]," & ",["a",{title:null,href:"#validatestatusstyle-interface"},"ValidateStatusStyle"]],["td","-"]],["tr",["td","trigger"],["td","When to collect the value of children node. Click ",["a",{title:null,href:"https://ant.design/components/form#components-form-demo-customized-form-controls"},"here"]," to see an example"],["td","string"],["td",["code","onChange"]]],["tr",["td","validateDebounce"],["td","Delay milliseconds to start validation"],["td","number"],["td","-"]],["tr",["td","validateFirst"],["td","Whether stop validate on first rule of error for this field. Will parallel validate when ",["code","parallel"]," configured"],["td","boolean ","|"," ",["code","parallel"]],["td","false"]],["tr",["td","validateStatus"],["td","The validation status. If not provided, it will be generated by validation rule. options: ",["code","success"]," ",["code","warning"]," ",["code","error"]," ",["code","validating"]],["td","string"],["td","-"]],["tr",["td","validateTrigger"],["td","When to validate the value of children node"],["td","string ","|"," string","[","]"],["td",["code","onChange"]]],["tr",["td","valuePropName"],["td","Props of children node, for example, the prop of Switch or Checkbox is ",["code","checked"],". This prop is an encapsulation of ",["code","getValueProps"],", which will be invalid after customizing ",["code","getValueProps"]],["td","string"],["td",["code","value"]]],["tr",["td","wrapperStyle"],["td","The layout for input controls, same as ",["code","labelStyle"],". You can set ",["code","wrapperStyle"]," on Form which will not affect nest Item. If both exists, use Item first"],["td",["code","ViewStyle"]],["td","-"]]]],["p","The layout of Form.Item is based on List.Item. So it also supports these props of ",["a",{title:null,href:"/components/list/#List.Item"},"List.Item"]],["p",["code","arrow"]," ",["code","extra"]," ",["code","thumb"]],["p","After wrapped by ",["code","Form.Item"]," with ",["code","name"]," property, ",["code","value"],"(or other property defined by ",["code","valuePropName"],") ",["code","onChange"],"(or other property defined by ",["code","trigger"],") props will be added to form controls, the flow of form data will be handled by Form which will cause:"],["ol",["li",["p","You shouldn't use ",["code","onChange"]," on each form control to ",["strong","collect data"],"(use ",["code","onValuesChange"]," of Form), but you can still listen to ",["code","onChange"],"."]],["li",["p","You cannot set value for each form control via ",["code","value"]," or ",["code","defaultValue"]," prop, you should set default value with ",["code","initialValues"]," of Form. Note that ",["code","initialValues"]," cannot be updated by ",["code","setState"]," dynamically, you should use ",["code","setFieldsValue"]," in that situation."]],["li",["p","You shouldn't call ",["code","setState"]," manually, please use ",["code","form.setFieldsValue"]," to change value programmatically."]]],["h3","dependencies"],["p","Used when there are dependencies between fields. If a field has the ",["code","dependencies"],' prop, this field will automatically trigger updates and validations when upstream is updated. A common scenario is a user registration form with "password" and "confirm password" fields. The "Confirm Password" validation depends on the "Password" field. After setting ',["code","dependencies"],', the "Password" field update will re-trigger the validation of "Check Password".'],["p",["code","dependencies"]," shouldn't be used together with ",["code","shouldUpdate"],", since it may result in conflicting update logic."],["h3","FeedbackIcons"],["p",["code","({ status: ValidateStatus, errors: ReactNode, warnings: ReactNode }) => Record<ValidateStatus, ReactNode>"]],["h3","shouldUpdate"],["p","Form updates only the modified field-related components for performance optimization purposes by incremental update. In most cases, you only need to write code or do validation with the ",["a",{title:null,href:"#dependencies"},["code","dependencies"]]," property. In some specific cases, such as when a new field option appears with a field value changed, or you just want to keep some area updating by form update, you can modify the update logic of Form.Item via the ",["code","shouldUpdate"],"."],["p","When ",["code","shouldUpdate"]," is ",["code","true"],", any Form update will cause the Form.Item to be re-rendered. This is very helpful for custom rendering some areas. It should be noted that the child component should be returned in a function, otherwise ",["code","shouldUpdate"]," won't behave correctly:"],["pre",{lang:"jsx",highlighted:'<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Form.Item</span> <span class="token attr-name">shouldUpdate</span><span class="token punctuation">></span></span>\n  <span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>pre</span><span class="token punctuation">></span></span><span class="token punctuation">{</span>JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>form<span class="token punctuation">.</span><span class="token function">getFieldsValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>pre</span><span class="token punctuation">></span></span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">}</span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Form.Item</span><span class="token punctuation">></span></span>'},["code","<Form.Item shouldUpdate>\n  {() => {\n    return <pre>{JSON.stringify(form.getFieldsValue(), null, 2)}</pre>;\n  }}\n</Form.Item>"]],["p","When ",["code","shouldUpdate"]," is a function, it will be called by form values update. Providing original values and current value to compare. This is very helpful for rendering additional fields based on values:"],["pre",{lang:"jsx",highlighted:'<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Form.Item</span> <span class="token attr-name">shouldUpdate</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span>prevValues<span class="token punctuation">,</span> curValues<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> prevValues<span class="token punctuation">.</span>additional <span class="token operator">!==</span> curValues<span class="token punctuation">.</span>additional<span class="token punctuation">}</span></span><span class="token punctuation">></span></span>\n  <span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token punctuation">(</span>\n      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Form.Item</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>other<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Input</span> <span class="token punctuation">/></span></span>\n      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Form.Item</span><span class="token punctuation">></span></span>\n    <span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">}</span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Form.Item</span><span class="token punctuation">></span></span>'},["code",'<Form.Item shouldUpdate={(prevValues, curValues) => prevValues.additional !== curValues.additional}>\n  {() => {\n    return (\n      <Form.Item name="other">\n        <Input />\n      </Form.Item>\n    );\n  }}\n</Form.Item>']],["h3","messageVariables"],["p","You can modify the default verification information of Form.Item through ",["code","messageVariables"],"."],["pre",{lang:"jsx",highlighted:'<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Form</span><span class="token punctuation">></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Form.Item</span>\n    <span class="token attr-name">messageVariables</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span> another<span class="token punctuation">:</span> <span class="token string">\'good\'</span> <span class="token punctuation">}</span><span class="token punctuation">}</span></span>\n    <span class="token attr-name">label</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>user<span class="token punctuation">"</span></span>\n    <span class="token attr-name">rules</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">[</span><span class="token punctuation">{</span> required<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> message<span class="token punctuation">:</span> <span class="token string">\'${another} is required\'</span> <span class="token punctuation">}</span></span><span class="token attr-name">]}</span>\n  <span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Input</span> <span class="token punctuation">/></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Form.Item</span><span class="token punctuation">></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Form.Item</span>\n    <span class="token attr-name">messageVariables</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span> label<span class="token punctuation">:</span> <span class="token string">\'good\'</span> <span class="token punctuation">}</span><span class="token punctuation">}</span></span>\n    <span class="token attr-name">label={&lt;span</span><span class="token punctuation">></span></span>user<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token punctuation">}</span>\n    rules<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">[</span><span class="token punctuation">{</span> required<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> message<span class="token punctuation">:</span> <span class="token string">\'${label} is required\'</span> <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">}</span>\n  <span class="token operator">></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Input</span> <span class="token punctuation">/></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Form.Item</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Form</span><span class="token punctuation">></span></span>'},["code","<Form>\n  <Form.Item\n    messageVariables={{ another: 'good' }}\n    label=\"user\"\n    rules={[{ required: true, message: '${another} is required' }]}\n  >\n    <Input />\n  </Form.Item>\n  <Form.Item\n    messageVariables={{ label: 'good' }}\n    label={<span>user</span>}\n    rules={[{ required: true, message: '${label} is required' }]}\n  >\n    <Input />\n  </Form.Item>\n</Form>"]],["h2","Form.List"],["p","Provides array management for fields."],["table",["thead",["tr",["th","Property"],["th","Description"],["th","Type"],["th","Default"]]],["tbody",["tr",["td","children"],["td","Render function"],["td","(fields: Field","[","], operation: { add, remove, move }, meta: { errors }) => React.ReactNode"],["td","-"]],["tr",["td","initialValue"],["td","Config sub default value. Form ",["code","initialValues"]," get higher priority when conflict"],["td","any","[","]"],["td","-"]],["tr",["td","name"],["td","Field name, support array. List is also a field, so it will return all the values by ",["code","getFieldsValue"],". You can change this logic by ",["a",{title:null,href:"#getfieldsvalue"},"config"]],["td",["a",{title:null,href:"#namepath"},"NamePath"]],["td","-"]],["tr",["td","rules"],["td","Validate rules, only support customize validator. Should work with ",["a",{title:null,href:"#formerrorlist"},"ErrorList"]],["td","{ validator, message }","[","]"],["td","-"]]]],["pre",{lang:"tsx",highlighted:'<span class="token operator">&lt;</span>Form<span class="token punctuation">.</span>List<span class="token operator">></span>\n  {<span class="token punctuation">(</span>fields<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span>\n    <span class="token operator">&lt;</span>div<span class="token operator">></span>\n      {fields<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>field<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span>\n        <span class="token operator">&lt;</span>Form<span class="token punctuation">.</span>Item {<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>field}<span class="token operator">></span>\n          <span class="token operator">&lt;</span>Input <span class="token operator">/</span><span class="token operator">></span>\n        <span class="token operator">&lt;</span><span class="token operator">/</span>Form<span class="token punctuation">.</span>Item<span class="token operator">></span>\n      <span class="token punctuation">)</span><span class="token punctuation">)</span>}\n    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>\n  <span class="token punctuation">)</span>}\n<span class="token operator">&lt;</span><span class="token operator">/</span>Form<span class="token punctuation">.</span>List<span class="token operator">></span>'},["code","<Form.List>\n  {(fields) => (\n    <div>\n      {fields.map((field) => (\n        <Form.Item {...field}>\n          <Input />\n        </Form.Item>\n      ))}\n    </div>\n  )}\n</Form.List>"]],["p","Note: You should not configure Form.Item ",["code","initialValue"]," under Form.List. It always should be configured by Form.List ",["code","initialValue"]," or Form ",["code","initialValues"],"."],["h2","operation"],["p","Some operator functions in render form of Form.List."],["table",["thead",["tr",["th","Property"],["th","Description"],["th","Type"],["th","Default"]]],["tbody",["tr",["td","add"],["td","add form item"],["td","(defaultValue?: any, insertIndex?: number) => void"],["td","insertIndex"]],["tr",["td","move"],["td","move form item"],["td","(from: number, to: number) => void"],["td","-"]],["tr",["td","remove"],["td","remove form item"],["td","(index: number ","|"," number","[","]) => void"],["td","number","[","]"]]]],["h2","Form.ErrorList"],["p","Show error messages, should only work with ",["code","rules"]," of Form.List. See ",["a",{title:null,href:"https://ant.design/components/form#components-form-demo-dynamic-form-item"},"example"],"."],["table",["thead",["tr",["th","Property"],["th","Description"],["th","Type"],["th","Default"]]],["tbody",["tr",["td","errors"],["td","Error list"],["td","ReactNode","[","]"],["td","-"]],["tr",["td","styles"],["td","Semantic DOM style"],["td",["a",{title:null,href:"#validatestatusstyle-interface"},"ValidateStatusStyle"]],["td","-"]]]],["h2","Form.Provider"],["p","Provide linkage between forms. If a sub form with ",["code","name"]," prop update, it will auto trigger Provider related events. See ",["a",{title:null,href:"https://ant.design/components/form#components-form-demo-form-context"},"example"],"."],["table",["thead",["tr",["th","Property"],["th","Description"],["th","Type"],["th","Default"]]],["tbody",["tr",["td","onFormChange"],["td","Triggered when a sub form field updates"],["td","function(formName: string, info: { changedFields, forms })"],["td","-"]],["tr",["td","onFormFinish"],["td","Triggered when a sub form submits"],["td","function(formName: string, info: { values, forms })"],["td","-"]]]],["pre",{lang:"jsx",highlighted:'<span class="token operator">&lt;</span>Form<span class="token punctuation">.</span>Provider\n  onFormFinish<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>name <span class="token operator">===</span> <span class="token string">\'form1\'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token comment" spellcheck="true">// Do something...</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span><span class="token punctuation">}</span>\n<span class="token operator">></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Form</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>form1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token operator">...</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Form</span><span class="token punctuation">></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Form</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>form2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token operator">...</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Form</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Form.Provider</span><span class="token punctuation">></span></span>'},["code",'<Form.Provider\n  onFormFinish={(name) => {\n    if (name === \'form1\') {\n      // Do something...\n    }\n  }}\n>\n  <Form name="form1">...</Form>\n  <Form name="form2">...</Form>\n</Form.Provider>']],["h3","FormInstance"],["table",["thead",["tr",["th","Name"],["th","Description"],["th","Type"]]],["tbody",["tr",["td","getFieldError"],["td","Get the error messages by the field name"],["td","(name: ",["a",{title:null,href:"#namepath"},"NamePath"],") => string","[","]"]],["tr",["td","getFieldInstance"],["td","Get field instance"],["td","(name: ",["a",{title:null,href:"#namepath"},"NamePath"],") => any"]],["tr",["td","getFieldsError"],["td","Get the error messages by the fields name. Return as an array"],["td","(nameList?: ",["a",{title:null,href:"#namepath"},"NamePath"],"[","]) => FieldError","[","]"]],["tr",["td","getFieldsValue"],["td","Get values by a set of field names. Return according to the corresponding structure. Default return mounted field value, but you can use ",["code","getFieldsValue(true)"]," to get all values"],["td",["a",{title:null,href:"#getfieldsvalue"},"GetFieldsValue"]]],["tr",["td","getFieldValue"],["td","Get the value by the field name"],["td","(name: ",["a",{title:null,href:"#namepath"},"NamePath"],") => any"]],["tr",["td","isFieldsTouched"],["td","Check if fields have been operated. Check if all fields is touched when ",["code","allTouched"]," is ",["code","true"]],["td","(nameList?: ",["a",{title:null,href:"#namepath"},"NamePath"],"[","], allTouched?: boolean) => boolean"]],["tr",["td","isFieldTouched"],["td","Check if a field has been operated"],["td","(name: ",["a",{title:null,href:"#namepath"},"NamePath"],") => boolean"]],["tr",["td","isFieldValidating"],["td","Check field if is in validating"],["td","(name: ",["a",{title:null,href:"#namepath"},"NamePath"],") => boolean"]],["tr",["td","resetFields"],["td","Reset fields to ",["code","initialValues"]],["td","(fields?: ",["a",{title:null,href:"#namepath"},"NamePath"],"[","]) => void"]],["tr",["td","scrollToField"],["td","Scroll to field position"],["td","(name: ",["a",{title:null,href:"#namepath"},"NamePath"],", options: ","[",["a",{title:null,href:"https://github.com/stipsan/scroll-into-view-if-needed/tree/ece40bd9143f48caf4b99503425ecb16b0ad8249#options"},"ScrollOptions"],"]) => void"]],["tr",["td","setFields"],["td","Set fields status"],["td","(fields: ",["a",{title:null,href:"#fielddata"},"FieldData"],"[","]) => void"]],["tr",["td","setFieldValue"],["td","Set fields value(Will directly pass to form store and ",["strong","reset validation message"],". If you do not want to modify passed object, please clone first)"],["td","(name: ",["a",{title:null,href:"#namepath"},"NamePath"],", value: any) => void"]],["tr",["td","setFieldsValue"],["td","Set fields value(Will directly pass to form store and ",["strong","reset validation message"],". If you do not want to modify passed object, please clone first). Use ",["code","setFieldValue"]," instead if you want to only config single value in Form.List"],["td","(values) => void"]],["tr",["td","submit"],["td","Submit the form. It's same as click ",["code","submit"]," button"],["td","() => void"]],["tr",["td","validateFields"],["td","Validate fields. Use ",["code","recursive"]," to validate all the field in the path"],["td","(nameList?: ",["a",{title:null,href:"#namepath"},"NamePath"],"[","], config?: ",["a",{title:null,href:"#validateFields"},"ValidateConfig"],") => Promise"]]]],["h4","validateFields"],["pre",{lang:"tsx",highlighted:'export interface ValidateConfig {\n  <span class="token operator">/</span><span class="token operator">/</span> Only validate content <span class="token operator">and</span> <span class="token operator">not</span> show error message on UI<span class="token punctuation">.</span>\n  validateOnly<span class="token operator">?</span><span class="token punctuation">:</span> boolean<span class="token comment" spellcheck="true">;</span>\n  <span class="token operator">/</span><span class="token operator">/</span> Recursively validate the provided `nameList` <span class="token operator">and</span> its sub<span class="token operator">-</span>paths<span class="token punctuation">.</span>\n  recursive<span class="token operator">?</span><span class="token punctuation">:</span> boolean<span class="token comment" spellcheck="true">;</span>\n  <span class="token operator">/</span><span class="token operator">/</span> Validate dirty fields <span class="token punctuation">(</span>touched <span class="token operator">+</span> validated<span class="token punctuation">)</span><span class="token punctuation">.</span>\n  <span class="token operator">/</span><span class="token operator">/</span> It\'s useful <span class="token keyword">to</span> validate fields only when they are touched <span class="token operator">or</span> validated<span class="token punctuation">.</span>\n  dirty<span class="token operator">?</span><span class="token punctuation">:</span> boolean<span class="token comment" spellcheck="true">;</span>\n}'},["code","export interface ValidateConfig {\n  // Only validate content and not show error message on UI.\n  validateOnly?: boolean;\n  // Recursively validate the provided `nameList` and its sub-paths.\n  recursive?: boolean;\n  // Validate dirty fields (touched + validated).\n  // It's useful to validate fields only when they are touched or validated.\n  dirty?: boolean;\n}"]],["p","return sample:"],["pre",{lang:"jsx",highlighted:'<span class="token function">validateFields</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span>values<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>\n    <span class="token comment" spellcheck="true">/*\n  values:\n    {\n      username: \'username\',\n      password: \'password\',\n    }\n  */</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span>\n  <span class="token punctuation">.</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span>errorInfo<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>\n    <span class="token comment" spellcheck="true">/*\n    errorInfo:\n      {\n        values: {\n          username: \'username\',\n          password: \'password\',\n        },\n        errorFields: [\n          { name: [\'password\'], errors: [\'Please input your Password!\'] },\n        ],\n        outOfDate: false,\n      }\n    */</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>'},["code","validateFields()\n  .then((values) => {\n    /*\n  values:\n    {\n      username: 'username',\n      password: 'password',\n    }\n  */\n  })\n  .catch((errorInfo) => {\n    /*\n    errorInfo:\n      {\n        values: {\n          username: 'username',\n          password: 'password',\n        },\n        errorFields: [\n          { name: ['password'], errors: ['Please input your Password!'] },\n        ],\n        outOfDate: false,\n      }\n    */\n  });"]],["h3","FormItemStyle interface"],["pre",{lang:"typescript",highlighted:'<span class="token keyword">interface</span> <span class="token class-name">FormItemStyle</span> <span class="token keyword">extends</span> <span class="token class-name">ListItemStyle</span> <span class="token punctuation">{</span>\n  formitemRow<span class="token punctuation">:</span> ViewStyle\n  formitemColumn<span class="token punctuation">:</span> ViewStyle\n  formItemExtra<span class="token punctuation">:</span> ViewStyle <span class="token operator">|</span> TextStyle  <span class="token comment" spellcheck="true">// default: { maxWidth: 50% } as ListItem[\'extra\']</span>\n  formItemLabel<span class="token punctuation">:</span> ViewStyle              <span class="token comment" spellcheck="true">// default: { minWidth: 65 }</span>\n  formItemLabelText<span class="token punctuation">:</span> ViewStyle <span class="token operator">|</span> TextStyle\n  formItemControl<span class="token punctuation">:</span> ViewStyle            <span class="token comment" spellcheck="true">// children style</span>\n  asterisk<span class="token punctuation">:</span> TextStyle                   <span class="token comment" spellcheck="true">// required={true}</span>\n  optional<span class="token punctuation">:</span> TextStyle                   <span class="token comment" spellcheck="true">// requiredMark="optional"</span>\n<span class="token punctuation">}</span>'},["code","interface FormItemStyle extends ListItemStyle {\n  formitemRow: ViewStyle\n  formitemColumn: ViewStyle\n  formItemExtra: ViewStyle | TextStyle  // default: { maxWidth: 50% } as ListItem['extra']\n  formItemLabel: ViewStyle              // default: { minWidth: 65 }\n  formItemLabelText: ViewStyle | TextStyle\n  formItemControl: ViewStyle            // children style\n  asterisk: TextStyle                   // required={true}\n  optional: TextStyle                   // requiredMark=\"optional\"\n}"]],["h3","ValidateStatusStyle interface"],["p","when set ",["code","validateStatus"]," prop"],["pre",{lang:"typescript",highlighted:'<span class="token keyword">interface</span> <span class="token class-name">ValidateStatusStyle</span> <span class="token punctuation">{</span>\n  error<span class="token punctuation">:</span> TextStyle\n  warning<span class="token punctuation">:</span> TextStyle\n  success<span class="token punctuation">:</span> TextStyle\n  validating<span class="token punctuation">:</span> TextStyle\n  feedbackIcon<span class="token punctuation">:</span> ViewStyle\n<span class="token punctuation">}</span>'},["code","interface ValidateStatusStyle {\n  error: TextStyle\n  warning: TextStyle\n  success: TextStyle\n  validating: TextStyle\n  feedbackIcon: ViewStyle\n}"]],["h2","Hooks"],["h3","Form.useForm"],["p",["code","type Form.useForm = (): [FormInstance]"]],["p","Create Form instance to maintain data store."],["h3","Form.useFormInstance"],["p",["code","type Form.useFormInstance = (): FormInstance"]],["p","Get current context form instance to avoid pass as props between components:"],["pre",{lang:"tsx",highlighted:'<span class="token keyword">const</span> Sub <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> {\n  <span class="token keyword">const</span> form <span class="token operator">=</span> Form<span class="token punctuation">.</span><span class="token function">useFormInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">;</span>\n\n  return <span class="token operator">&lt;</span>Button onClick<span class="token operator">=</span>{<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> form<span class="token punctuation">.</span><span class="token function">setFieldsValue</span><span class="token punctuation">(</span>{}<span class="token punctuation">)</span>} <span class="token operator">/</span><span class="token operator">></span><span class="token comment" spellcheck="true">;</span>\n}<span class="token comment" spellcheck="true">;</span>\n\nexport <span class="token keyword">default</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> {\n  <span class="token keyword">const</span> <span class="token punctuation">[</span>form<span class="token punctuation">]</span> <span class="token operator">=</span> Form<span class="token punctuation">.</span><span class="token function">useForm</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">;</span>\n\n  return <span class="token punctuation">(</span>\n    <span class="token operator">&lt;</span>Form form<span class="token operator">=</span>{form}<span class="token operator">></span>\n      <span class="token operator">&lt;</span>Sub <span class="token operator">/</span><span class="token operator">></span>\n    <span class="token operator">&lt;</span><span class="token operator">/</span>Form<span class="token operator">></span>\n  <span class="token punctuation">)</span><span class="token comment" spellcheck="true">;</span>\n}<span class="token comment" spellcheck="true">;</span>'},["code","const Sub = () => {\n  const form = Form.useFormInstance();\n\n  return <Button onClick={() => form.setFieldsValue({})} />;\n};\n\nexport default () => {\n  const [form] = Form.useForm();\n\n  return (\n    <Form form={form}>\n      <Sub />\n    </Form>\n  );\n};"]],["h3","Form.useWatch"],["p",["code","type Form.useWatch = (namePath: NamePath | (selector: (values: Store) => any), formInstance?: FormInstance | WatchOptions): Value"]],["p","Watch the value of a field. You can use this to interact with other hooks like ",["code","useSWR"]," to reduce development costs:"],["pre",{lang:"tsx",highlighted:'<span class="token keyword">const</span> Demo <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> {\n  <span class="token keyword">const</span> <span class="token punctuation">[</span>form<span class="token punctuation">]</span> <span class="token operator">=</span> Form<span class="token punctuation">.</span><span class="token function">useForm</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">;</span>\n  <span class="token keyword">const</span> userName <span class="token operator">=</span> Form<span class="token punctuation">.</span><span class="token function">useWatch</span><span class="token punctuation">(</span><span class="token string">\'username\'</span><span class="token punctuation">,</span> form<span class="token punctuation">)</span><span class="token comment" spellcheck="true">;</span>\n\n  <span class="token keyword">const</span> { data<span class="token punctuation">:</span> options } <span class="token operator">=</span> <span class="token function">useSWR</span><span class="token punctuation">(</span>`<span class="token operator">/</span>api<span class="token operator">/</span>user<span class="token operator">/</span>${userName}`<span class="token punctuation">,</span> fetcher<span class="token punctuation">)</span><span class="token comment" spellcheck="true">;</span>\n\n  return <span class="token punctuation">(</span>\n    <span class="token operator">&lt;</span>Form form<span class="token operator">=</span>{form}<span class="token operator">></span>\n      <span class="token operator">&lt;</span>Form<span class="token punctuation">.</span>Item name<span class="token operator">=</span><span class="token string">"username"</span><span class="token operator">></span>\n        <span class="token operator">&lt;</span>AutoComplete options<span class="token operator">=</span>{options} <span class="token operator">/</span><span class="token operator">></span>\n      <span class="token operator">&lt;</span><span class="token operator">/</span>Form<span class="token punctuation">.</span>Item<span class="token operator">></span>\n    <span class="token operator">&lt;</span><span class="token operator">/</span>Form<span class="token operator">></span>\n  <span class="token punctuation">)</span><span class="token comment" spellcheck="true">;</span>\n}<span class="token comment" spellcheck="true">;</span>'},["code","const Demo = () => {\n  const [form] = Form.useForm();\n  const userName = Form.useWatch('username', form);\n\n  const { data: options } = useSWR(`/api/user/${userName}`, fetcher);\n\n  return (\n    <Form form={form}>\n      <Form.Item name=\"username\">\n        <AutoComplete options={options} />\n      </Form.Item>\n    </Form>\n  );\n};"]],["p","If your component is wrapped by ",["code","Form.Item"],", you can omit the second argument, ",["code","Form.useWatch"]," will find the nearest ",["code","FormInstance"]," automatically."],["p","By default ",["code","useWatch"]," only watches the registered field. If you want to watch the unregistered field, please use ",["code","preserve"],":"],["pre",{lang:"tsx",highlighted:'<span class="token keyword">const</span> Demo <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> {\n  <span class="token keyword">const</span> <span class="token punctuation">[</span>form<span class="token punctuation">]</span> <span class="token operator">=</span> Form<span class="token punctuation">.</span><span class="token function">useForm</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">;</span>\n\n  <span class="token keyword">const</span> age <span class="token operator">=</span> Form<span class="token punctuation">.</span><span class="token function">useWatch</span><span class="token punctuation">(</span><span class="token string">\'age\'</span><span class="token punctuation">,</span> { form<span class="token punctuation">,</span> preserve<span class="token punctuation">:</span> <span class="token boolean">true</span> }<span class="token punctuation">)</span><span class="token comment" spellcheck="true">;</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span><span class="token comment" spellcheck="true">;</span>\n\n  return <span class="token punctuation">(</span>\n    <span class="token operator">&lt;</span>div<span class="token operator">></span>\n      <span class="token operator">&lt;</span>Button onClick<span class="token operator">=</span>{<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> form<span class="token punctuation">.</span><span class="token function">setFieldValue</span><span class="token punctuation">(</span><span class="token string">\'age\'</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>}<span class="token operator">></span>Update<span class="token operator">&lt;</span><span class="token operator">/</span>Button<span class="token operator">></span>\n      <span class="token operator">&lt;</span>Form form<span class="token operator">=</span>{form}<span class="token operator">></span>\n        <span class="token operator">&lt;</span>Form<span class="token punctuation">.</span>Item name<span class="token operator">=</span><span class="token string">"name"</span><span class="token operator">></span>\n          <span class="token operator">&lt;</span>Input <span class="token operator">/</span><span class="token operator">></span>\n        <span class="token operator">&lt;</span><span class="token operator">/</span>Form<span class="token punctuation">.</span>Item<span class="token operator">></span>\n      <span class="token operator">&lt;</span><span class="token operator">/</span>Form<span class="token operator">></span>\n    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>\n  <span class="token punctuation">)</span><span class="token comment" spellcheck="true">;</span>\n}<span class="token comment" spellcheck="true">;</span>'},["code","const Demo = () => {\n  const [form] = Form.useForm();\n\n  const age = Form.useWatch('age', { form, preserve: true });\n  console.log(age);\n\n  return (\n    <div>\n      <Button onClick={() => form.setFieldValue('age', 2)}>Update</Button>\n      <Form form={form}>\n        <Form.Item name=\"name\">\n          <Input />\n        </Form.Item>\n      </Form>\n    </div>\n  );\n};"]],["h3","Form.Item.useStatus"],["p",["code","type Form.Item.useStatus = (): { status: ValidateStatus | undefined, errors: ReactNode[], warnings: ReactNode[] }"]],["p","Could be used to get validate status of Form.Item. If this hook is not used under Form.Item, ",["code","status"]," would be ",["code","undefined"],". ",["code","error"]," and ",["code","warnings"]," could be used to get error messages and warning messages of Form.Item:"],["pre",{lang:"tsx",highlighted:'<span class="token keyword">const</span> CustomInput <span class="token operator">=</span> <span class="token punctuation">(</span>{ value<span class="token punctuation">,</span> onChange }<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> {\n  <span class="token keyword">const</span> { status<span class="token punctuation">,</span> errors } <span class="token operator">=</span> Form<span class="token punctuation">.</span>Item<span class="token punctuation">.</span><span class="token function">useStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">;</span>\n  return <span class="token punctuation">(</span>\n    <span class="token operator">&lt;</span>input\n      value<span class="token operator">=</span>{value}\n      onChange<span class="token operator">=</span>{onChange}\n      className<span class="token operator">=</span>{`custom<span class="token operator">-</span>input<span class="token operator">-</span>${status}`}\n      placeholder<span class="token operator">=</span>{<span class="token punctuation">(</span>errors<span class="token punctuation">.</span>length <span class="token operator">&amp;</span><span class="token operator">&amp;</span> errors<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> || <span class="token string">\'\'</span>}\n    <span class="token operator">/</span><span class="token operator">></span>\n  <span class="token punctuation">)</span><span class="token comment" spellcheck="true">;</span>\n}<span class="token comment" spellcheck="true">;</span>\n\nexport <span class="token keyword">default</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span>\n  <span class="token operator">&lt;</span>Form<span class="token operator">></span>\n    <span class="token operator">&lt;</span>Form<span class="token punctuation">.</span>Item name<span class="token operator">=</span><span class="token string">"username"</span><span class="token operator">></span>\n      <span class="token operator">&lt;</span>CustomInput <span class="token operator">/</span><span class="token operator">></span>\n    <span class="token operator">&lt;</span><span class="token operator">/</span>Form<span class="token punctuation">.</span>Item<span class="token operator">></span>\n  <span class="token operator">&lt;</span><span class="token operator">/</span>Form<span class="token operator">></span>\n<span class="token punctuation">)</span><span class="token comment" spellcheck="true">;</span>'},["code","const CustomInput = ({ value, onChange }) => {\n  const { status, errors } = Form.Item.useStatus();\n  return (\n    <input\n      value={value}\n      onChange={onChange}\n      className={`custom-input-${status}`}\n      placeholder={(errors.length && errors[0]) || ''}\n    />\n  );\n};\n\nexport default () => (\n  <Form>\n    <Form.Item name=\"username\">\n      <CustomInput />\n    </Form.Item>\n  </Form>\n);"]],["h4","Difference between other data fetching method"],["p","Form only update the Field which changed to avoid full refresh perf issue. Thus you can not get real time value with ",["code","getFieldsValue"]," in render. And ",["code","useWatch"]," will rerender current component to sync with latest value. You can also use Field renderProps to get better performance if only want to do conditional render. If component no need care field value change, you can use ",["code","onValuesChange"]," to give to parent component to avoid current one rerender."],["h3","Interface"],["h4","NamePath"],["p",["code","string | number | (string | number)[]"]],["h4","GetFieldsValue"],["p",["code","getFieldsValue"]," provides overloaded methods:"],["h5","getFieldsValue(nameList?: true | ",["a",{title:null,href:"#namepath"},"NamePath"],"[","], filterFunc?: FilterFunc)"],["p","When ",["code","nameList"]," is empty, return all registered fields, including values of List (even if List has no Item children)."],["p","When ",["code","nameList"]," is ",["code","true"],", return all values in store, including unregistered fields. For example, if you set the value of an unregistered Item through ",["code","setFieldsValue"],", you can also get all values through ",["code","true"],"."],["p","When ",["code","nameList"]," is an array, return the value of the specified path. Note that ",["code","nameList"]," is a nested array. For example, you need the value of a certain path as follows:"],["pre",{lang:"tsx",highlighted:'<span class="token operator">/</span><span class="token operator">/</span> Single path\nform<span class="token punctuation">.</span><span class="token function">getFieldsValue</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">\'user\'</span><span class="token punctuation">,</span> <span class="token string">\'age\'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">;</span>\n\n<span class="token operator">/</span><span class="token operator">/</span> multiple path\nform<span class="token punctuation">.</span><span class="token function">getFieldsValue</span><span class="token punctuation">(</span><span class="token punctuation">[</span>\n  <span class="token punctuation">[</span><span class="token string">\'user\'</span><span class="token punctuation">,</span> <span class="token string">\'age\'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token punctuation">[</span><span class="token string">\'preset\'</span><span class="token punctuation">,</span> <span class="token string">\'account\'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">;</span>'},["code","// Single path\nform.getFieldsValue([['user', 'age']]);\n\n// multiple path\nform.getFieldsValue([\n  ['user', 'age'],\n  ['preset', 'account'],\n]);"]],["h5","getFieldsValue({ strict?: boolean, filter?: FilterFunc })"],["p","Accept configuration parameters. When ",["code","strict"]," is ",["code","true"],", only the value of Item will be matched. For example, in ",["code","{ list: [{ bamboo: 1, little: 2 }] }"],", if List is only bound to the ",["code","bamboo"]," field, then ",["code","getFieldsValue({ strict: true })"]," will only get ",["code","{ list: [{ bamboo: 1 }] }"],"."],["h4","FilterFunc"],["p","To filter certain field values, ",["code","meta"]," will provide information related to the fields. For example, it can be used to retrieve values that have only been modified by the user, and so on."],["pre",{lang:"tsx",highlighted:'type FilterFunc <span class="token operator">=</span> <span class="token punctuation">(</span>meta<span class="token punctuation">:</span> { touched<span class="token punctuation">:</span> boolean<span class="token comment" spellcheck="true">; validating: boolean }) => boolean;</span>'},["code","type FilterFunc = (meta: { touched: boolean; validating: boolean }) => boolean;"]],["h4","FieldData"],["table",["thead",["tr",["th","Name"],["th","Description"],["th","Type"]]],["tbody",["tr",["td","errors"],["td","Error messages"],["td","string","[","]"]],["tr",["td","warnings"],["td","Warning messages"],["td","string","[","]"]],["tr",["td","name"],["td","Field name path"],["td",["a",{title:null,href:"#namepath"},"NamePath"],"[","]"]],["tr",["td","touched"],["td","Whether is operated"],["td","boolean"]],["tr",["td","validating"],["td","Whether is in validating"],["td","boolean"]],["tr",["td","value"],["td","Field value"],["td","any"]]]],["h4","Rule"],["p","Rule supports a config object, or a function returning config object:"],["pre",{lang:"tsx",highlighted:'type Rule <span class="token operator">=</span> RuleConfig | <span class="token punctuation">(</span><span class="token punctuation">(</span>form<span class="token punctuation">:</span> FormInstance<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> RuleConfig<span class="token punctuation">)</span><span class="token comment" spellcheck="true">;</span>'},["code","type Rule = RuleConfig | ((form: FormInstance) => RuleConfig);"]],["table",["thead",["tr",["th","Name"],["th","Description"],["th","Type"]]],["tbody",["tr",["td","defaultField"],["td","Validate rule for all array elements, valid when ",["code","type"]," is ",["code","array"]],["td",["a",{title:null,href:"#rule"},"rule"]]],["tr",["td","enum"],["td","Match enum value. You need to set ",["code","type"]," to ",["code","enum"]," to enable this"],["td","any","[","]"]],["tr",["td","fields"],["td","Validate rule for child elements, valid when ",["code","type"]," is ",["code","array"]," or ",["code","object"]],["td","Record","<","string, ",["a",{title:null,href:"#rule"},"rule"],">"]],["tr",["td","len"],["td","Length of string, number, array"],["td","number"]],["tr",["td","max"],["td",["code","type"]," required: max length of ",["code","string"],", ",["code","number"],", ",["code","array"]],["td","number"]],["tr",["td","message"],["td","Error message. Will auto generate by ",["a",{title:null,href:"#validatemessages"},"template"]," if not provided"],["td","string"]],["tr",["td","min"],["td",["code","type"]," required: min length of ",["code","string"],", ",["code","number"],", ",["code","array"]],["td","number"]],["tr",["td","pattern"],["td","Regex pattern"],["td","RegExp"]],["tr",["td","required"],["td","Required field"],["td","boolean"]],["tr",["td","transform"],["td","Transform value to the rule before validation"],["td","(value) => any"]],["tr",["td","type"],["td","Normally ",["code","string"]," ","|",["code","number"]," ","|",["code","boolean"]," ","|",["code","url"]," ","|"," ",["code","email"],". More type to ref ",["a",{title:null,href:"https://github.com/yiminghe/async-validator#type"},"here"]],["td","string"]],["tr",["td","validateTrigger"],["td","Set validate trigger event. Must be the sub set of ",["code","validateTrigger"]," in Form.Item"],["td","string ","|"," string","[","]"]],["tr",["td","validator"],["td","Customize validation rule. Accept Promise as return. See ",["a",{title:null,href:"https://ant.design/components/form#components-form-demo-register"},"example"]],["td","(",["a",{title:null,href:"#rule"},"rule"],", value) => Promise"]],["tr",["td","warningOnly"],["td","Warning only. Not block form submit"],["td","boolean"]],["tr",["td","whitespace"],["td","Failed if only has whitespace, only work with ",["code","type: 'string'"]," rule"],["td","boolean"]]]],["h4","WatchOptions"],["table",["thead",["tr",["th","Name"],["th","Description"],["th","Type"],["th","Default"]]],["tbody",["tr",["td","form"],["td","Form instance"],["td","FormInstance"],["td","Current form in context"]],["tr",["td","preserve"],["td","Whether to watch the field which has no matched ",["code","Form.Item"]],["td","boolean"],["td","false"]]]],["h2","FAQ"],["h3","Why can't Switch、Checkbox、Radio bind data?"],["p","Form.Item default bind value to ",["code","value"]," prop, but Switch or Checkbox value prop is ",["code","checked"],". You can use ",["code","valuePropName"]," to change bind value prop."],["pre",{lang:"tsx | pure",highlighted:'<span class="token operator">&lt;</span>Form<span class="token punctuation">.</span>Item name<span class="token operator">=</span><span class="token string">"fieldA"</span> valuePropName<span class="token operator">=</span><span class="token string">"checked"</span><span class="token operator">></span>\n  <span class="token operator">&lt;</span><span class="token keyword">Switch</span> <span class="token operator">/</span><span class="token operator">></span>\n<span class="token operator">&lt;</span><span class="token operator">/</span>Form<span class="token punctuation">.</span>Item<span class="token operator">></span>'},["code",'<Form.Item name="fieldA" valuePropName="checked">\n  <Switch />\n</Form.Item>']],["h3","How does Form.Item work with Picker / DatePicker?"],["p","When Picker's ",["code","children"]," is ",["code","List.Item"],", it can be used directly.\n",["br"],"Note: Form.Item need ",["code","noStyle"]," prop "],["pre",{lang:"tsx",highlighted:'<span class="token operator">&lt;</span>Form<span class="token punctuation">.</span>Item name<span class="token operator">=</span><span class="token string">"address"</span> noStyle<span class="token operator">></span>\n  <span class="token operator">&lt;</span>Picker data<span class="token operator">=</span>{data} cols<span class="token operator">=</span>{<span class="token number">3</span>}<span class="token operator">></span>\n   <span class="token operator">&lt;</span>List<span class="token punctuation">.</span>Item<span class="token operator">></span>地址<span class="token operator">&lt;</span><span class="token operator">/</span>List<span class="token punctuation">.</span>Item<span class="token operator">></span>\n  <span class="token operator">&lt;</span><span class="token operator">/</span>Picker<span class="token operator">></span>\n<span class="token operator">&lt;</span><span class="token operator">/</span>Form<span class="token punctuation">.</span>Item<span class="token operator">></span>'},["code",'<Form.Item name="address" noStyle>\n  <Picker data={data} cols={3}>\n   <List.Item>地址</List.Item>\n  </Picker>\n</Form.Item>']],["p","However, we recommend the composition layout of ",["code","Form.Item"]," and ",["code","Input"],", so how to use it when ",["code","children"]," is not ",["code","List.Item"],"?\n",["br"],"\nWhen ",["code","children"]," is a ",["strong","function"],", the ",["code","toggle"]," parameter will be provided to control the display/hide of Picker."],["pre",{lang:"tsx",highlighted:'<span class="token operator">&lt;</span>Form<span class="token punctuation">.</span>Item label<span class="token operator">=</span><span class="token string">"地址"</span> name<span class="token operator">=</span><span class="token string">"address"</span><span class="token operator">></span>\n  <span class="token operator">&lt;</span>Picker data<span class="token operator">=</span>{data} cols<span class="token operator">=</span>{<span class="token number">3</span>} <span class="token operator">></span>\n    {<span class="token punctuation">(</span>{ extra<span class="token punctuation">,</span> value<span class="token punctuation">,</span> toggle }<span class="token punctuation">:</span> any<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span>\n      <span class="token operator">&lt;</span>Input\n        value<span class="token operator">=</span>{value<span class="token operator">?</span><span class="token punctuation">.</span>length <span class="token operator">?</span> extra <span class="token punctuation">:</span> undefined}\n        onFocus<span class="token operator">=</span>{toggle}\n        placeholder<span class="token operator">=</span><span class="token string">"省/市/区"</span>\n      <span class="token operator">/</span><span class="token operator">></span>\n    <span class="token punctuation">)</span>}\n  <span class="token operator">&lt;</span><span class="token operator">/</span>Picker<span class="token operator">></span>\n<span class="token operator">&lt;</span><span class="token operator">/</span>Form<span class="token punctuation">.</span>Item<span class="token operator">></span>'},["code",'<Form.Item label="地址" name="address">\n  <Picker data={data} cols={3} >\n    {({ extra, value, toggle }: any) => (\n      <Input\n        value={value?.length ? extra : undefined}\n        onFocus={toggle}\n        placeholder="省/市/区"\n      />\n    )}\n  </Picker>\n</Form.Item>']],["p","Secondly, you can use ",["code","ref"]],["pre",{lang:"tsx",highlighted:'<span class="token keyword">const</span> pickerRef <span class="token operator">=</span> <span class="token function">useRef</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">;</span>\n\n<span class="token operator">&lt;</span>Form<span class="token punctuation">.</span>Item label<span class="token operator">=</span><span class="token string">"地址"</span> name<span class="token operator">=</span><span class="token string">"address"</span> onPress<span class="token operator">=</span>{<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span>pickerRef<span class="token punctuation">.</span>current<span class="token operator">?</span><span class="token punctuation">.</span><span class="token function">toggle</span><span class="token punctuation">(</span><span class="token punctuation">)</span>}<span class="token operator">></span>\n  <span class="token operator">&lt;</span>Picker data<span class="token operator">=</span>{data} cols<span class="token operator">=</span>{<span class="token number">3</span>} ref<span class="token operator">=</span>{pickerRef}<span class="token operator">></span>\n    <span class="token operator">&lt;</span>Input placeholder<span class="token operator">=</span><span class="token string">"省/市/区"</span><span class="token operator">/</span><span class="token operator">></span>\n  <span class="token operator">&lt;</span><span class="token operator">/</span>Picker<span class="token operator">></span>\n<span class="token operator">&lt;</span><span class="token operator">/</span>Form<span class="token punctuation">.</span>Item<span class="token operator">></span>'},["code",'const pickerRef = useRef();\n\n<Form.Item label="地址" name="address" onPress={()=>pickerRef.current?.toggle()}>\n  <Picker data={data} cols={3} ref={pickerRef}>\n    <Input placeholder="省/市/区"/>\n  </Picker>\n</Form.Item>']],["h3","Is there any more reference documentation?"],["p",["a",{title:null,href:"https://ant.design/components/form-cn"},"https://ant.design/components/form-cn"]]],meta:{category:"Components",type:"Data Entry",title:"Form",version:"5.2.0",filename:"components/form/index.en-US.md"}}}}]);