(self.webpackChunk_ant_design_react_native=self.webpackChunk_ant_design_react_native||[]).push([[1827],{1192:n=>{n.exports={content:["article",["p","高性能表单控件，自带数据域管理。包含数据录入、校验以及对应样式。基于",["a",{title:null,href:"https://www.npmjs.com/package/rc-field-form"},"rc-field-form"],"。"],["p","示例参考 ",["a",{title:null,href:"https://ant.design/components/form-cn"},"https://ant.design/components/form-cn"]],["h2","何时使用"],["ul",["li",["p","用于创建一个实体或收集信息。"]],["li",["p","需要对输入的数据类型进行校验时。"]]],["h2","API"],["h3","Form"],["table",["thead",["tr",["th","参数"],["th","说明"],["th","类型"],["th","默认值"]]],["tbody",["tr",["td","disabled"],["td","设置表单组件禁用，仅对 ",["code","@ant-design/react-native"]," 内置组件有效"],["td","boolean"],["td","false"]],["tr",["td","component"],["td","设置 Form 渲染元素，为 ",["code","false"]," 则不创建 ReactNode 节点"],["td","ComponentType ","|"," false"],["td",["code","List"]]],["tr",["td","fields"],["td","通过状态管理（如 redux）控制表单字段，如非强需求不推荐使用。查看",["a",{title:null,href:"https://ant.design/components/form-cn#components-form-demo-global-state"},"示例"]],["td",["a",{title:null,href:"#fielddata"},"FieldData"],"[","]"],["td","-"]],["tr",["td","form"],["td","经 ",["code","Form.useForm()"]," 创建的 form 控制实例，不提供时会自动创建"],["td",["a",{title:null,href:"#forminstance"},"FormInstance"]],["td","-"]],["tr",["td","feedbackIcons"],["td","当 ",["code","Form.Item"]," 有 ",["code","hasFeedback"]," 属性时可以自定义图标"],["td",["a",{title:null,href:"#feedbackicons"},"FeedbackIcons"]],["td","-"]],["tr",["td","initialValues"],["td","表单默认值，只有初始化以及重置时生效"],["td","object"],["td","-"]],["tr",["td","labelStyle"],["td","label 标签的样式"],["td",["code","ViewStyle \\| TextStyle"]],["td","-"]],["tr",["td","layout"],["td","表单布局"],["td",["code","horizontal"]," ","|"," ",["code","vertical"]],["td",["code","horizontal"]]],["tr",["td","name"],["td","表单名称，会作为表单字段 ",["code","id"]," 前缀使用"],["td","string"],["td","-"]],["tr",["td","preserve"],["td","当字段被删除时保留字段值。你可以通过 ",["code","getFieldsValue(true)"]," 来获取保留字段值"],["td","boolean"],["td","true"]],["tr",["td","requiredMark"],["td","必选样式，可以切换为必选或者可选展示样式。此为 Form 配置，Form.Item 无法单独配置"],["td","boolean ","|"," ",["code","optional"]," ","|"," ((label: ReactNode, info: { required: boolean }) => ReactNode)"],["td","true"]],["tr",["td","validateMessages"],["td","验证提示模板，说明",["a",{title:null,href:"#validatemessages"},"见下"]],["td",["a",{title:null,href:"https://github.com/ant-design/ant-design/blob/6234509d18bac1ac60fbb3f92a5b2c6a6361295a/components/locale/en_US.ts#L88-L134"},"ValidateMessages"]],["td","-"]],["tr",["td","validateTrigger"],["td","统一设置字段触发验证的时机"],["td","string ","|"," string","[","]"],["td",["code","onChange"]]],["tr",["td","wrapperStyle"],["td","需要为输入控件设置布局样式时，使用该属性，用法同 labelStyle"],["td",["code","ViewStyle"]],["td","-"]],["tr",["td","onFieldsChange"],["td","字段更新时触发回调事件"],["td","function(changedFields, allFields)"],["td","-"]],["tr",["td","onFinish"],["td","提交表单且数据验证成功后回调事件"],["td","function(values)"],["td","-"]],["tr",["td","onFinishFailed"],["td","提交表单且数据验证失败后回调事件"],["td","function({ values, errorFields, outOfDate })"],["td","-"]],["tr",["td","onValuesChange"],["td","字段值更新时触发回调事件"],["td","function(changedValues, allValues)"],["td","-"]],["tr",["td","styles"],["td","语义化结构 style"],["td","同 ",["a",{title:null,href:"/components/list-cn#liststyle-语义化样式"},"ListStyle"]],["td","-"]]]],["h3","validateMessages"],["p","Form 为验证提供了",["a",{title:null,href:"https://github.com/ant-design/ant-design/blob/6234509d18bac1ac60fbb3f92a5b2c6a6361295a/components/locale/en_US.ts#L88-L134"},"默认的错误提示信息"],"，你可以通过配置 ",["code","validateMessages"]," 属性，修改对应的提示模板。一种常见的使用方式，是配置国际化提示信息："],["pre",{lang:"jsx",highlighted:'<span class="token keyword">const</span> validateMessages <span class="token operator">=</span> <span class="token punctuation">{</span>\n  required<span class="token punctuation">:</span> <span class="token string">"\'${name}\' 是必选字段"</span><span class="token punctuation">,</span>\n  <span class="token comment" spellcheck="true">// ...</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Form</span> <span class="token attr-name">validateMessages</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>validateMessages<span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span><span class="token punctuation">;</span>'},["code","const validateMessages = {\n  required: \"'${name}' 是必选字段\",\n  // ...\n};\n\n<Form validateMessages={validateMessages} />;"]],["h2","Form.Item"],["p","表单字段组件，用于数据双向绑定、校验、布局等。"],["table",["thead",["tr",["th","参数"],["th","说明"],["th","类型"],["th","默认值"]]],["tbody",["tr",["td","dependencies"],["td","设置依赖字段，说明",["a",{title:null,href:"#dependencies"},"见下"]],["td",["a",{title:null,href:"#namepath"},"NamePath"],"[","]"],["td","-"]],["tr",["td","getValueFromEvent"],["td","设置如何将 event 的值转换成字段值"],["td","(..args: any","[","]) => any"],["td","-"]],["tr",["td","getValueProps"],["td","为子元素添加额外的属性 (不建议通过 ",["code","getValueProps"]," 生成动态函数 prop，请直接将其传递给子组件)"],["td","(value: any) => Record<string, any>"],["td","-"]],["tr",["td","hasFeedback"],["td","配合 ",["code","validateStatus"]," 属性使用，展示校验状态图标，建议只配合 Input 组件使用 此外，它还可以通过 Icons 属性获取反馈图标。"],["td","boolean ","|"," { icons: ",["a",{title:null,href:"#feedbackicons"},"FeedbackIcons"]," }"],["td","false"]],["tr",["td","help"],["td","提示信息，如不设置，则会根据校验规则自动生成"],["td","ReactNode"],["td","-"]],["tr",["td","hidden"],["td","是否隐藏字段（依然会收集和校验字段）"],["td","boolean"],["td","false"]],["tr",["td","initialValue"],["td","设置子元素默认值，如果与 Form 的 ",["code","initialValues"]," 冲突则以 Form 为准"],["td","string"],["td","-"]],["tr",["td","label"],["td",["code","label"]," 标签的文本"],["td","ReactNode"],["td","-"]],["tr",["td","labelStyle"],["td","label 标签的样式。你可以通过 Form 的 ",["code","labelStyle"]," 进行统一设置，不会作用于嵌套 Item。当和 Form 同时设置时，以 Item 为准"],["td"],["td","-"]],["tr",["td","messageVariables"],["td","默认验证字段的信息"],["td","Record","<","string, string>"],["td","-"]],["tr",["td","name"],["td","字段名，支持数组"],["td",["a",{title:null,href:"#namepath"},"NamePath"]],["td","-"]],["tr",["td","normalize"],["td","组件获取值后进行转换，再放入 Form 中。不支持异步"],["td","(value, prevValue, prevValues) => any"],["td","-"]],["tr",["td","noStyle"],["td","为 ",["code","true"]," 时不带样式，作为纯字段控件使用。当自身没有 ",["code","validateStatus"]," 而父元素存在有 ",["code","validateStatus"]," 的 Form.Item 会继承父元素的 ",["code","validateStatus"]],["td","boolean"],["td","false"]],["tr",["td","preserve"],["td","当字段被删除时保留字段值"],["td","boolean"],["td","true"]],["tr",["td","required"],["td","必填样式设置。如不设置，则会根据校验规则自动生成"],["td","boolean"],["td","false"]],["tr",["td","rules"],["td","校验规则，设置字段的校验逻辑。点击",["a",{title:null,href:"https://ant.design/components/form-cn#components-form-demo-basic"},"此处"],"查看示例"],["td",["a",{title:null,href:"#rule"},"Rule"],"[","]"],["td","-"]],["tr",["td","shouldUpdate"],["td","自定义字段更新逻辑，说明",["a",{title:null,href:"#shouldupdate"},"见下"]],["td","boolean ","|"," (prevValue, curValue) => boolean"],["td","false"]],["tr",["td","styles"],["td","语义化结构 style"],["td",["a",{title:null,href:"#formitemstyle-语义化样式"},"FormItemStyle"]," & ",["a",{title:null,href:"#validatestatusstyle-语义化样式"},"ValidateStatusStyle"]],["td","-"]],["tr",["td","trigger"],["td","设置收集字段值变更的时机。点击",["a",{title:null,href:"https://ant.design/components/form-cn#components-form-demo-customized-form-controls"},"此处"],"查看示例"],["td","string"],["td",["code","onChange"]]],["tr",["td","validateFirst"],["td","当某一规则校验不通过时，是否停止剩下的规则的校验。设置 ",["code","parallel"]," 时会并行校验"],["td","boolean ","|"," ",["code","parallel"]],["td","false"]],["tr",["td","validateDebounce"],["td","设置防抖，延迟毫秒数后进行校验"],["td","number"],["td","-"]],["tr",["td","validateStatus"],["td","校验状态，如不设置，则会根据校验规则自动生成，可选：'success' 'warning' 'error' 'validating'"],["td","string"],["td","-"]],["tr",["td","validateTrigger"],["td","设置字段校验的时机"],["td","string ","|"," string","[","]"],["td",["code","onChange"]]],["tr",["td","valuePropName"],["td","子节点的值的属性。注意：Switch、Checkbox 的 valuePropName 应该是 ",["code","checked"],"，否则无法获取这个两个组件的值。该属性为 ",["code","getValueProps"]," 的封装，自定义 ",["code","getValueProps"]," 后会失效"],["td","string"],["td",["code","value"]]],["tr",["td","wrapperStyle"],["td","需要为输入控件设置布局样式时，使用该属性，用法同 ",["code","labelStyle"],"。你可以通过 Form 的 ",["code","wrapperCol"]," 进行统一设置，不会作用于嵌套 Item。当和 Form 同时设置时，以 Item 为准"],["td",["code","ViewStyle"]],["td","-"]]]],["p","Form.Item 的布局是基于 List.Item 实现的，所以它还支持 ",["a",{title:null,href:"/components/list-cn/#List.Item"},"List.Item"]," 的以下属性："],["p",["code","arrow"]," ",["code","extra"]," ",["code","thumb"]],["p","被设置了 ",["code","name"]," 属性的 ",["code","Form.Item"]," 包装的控件，表单控件会自动添加 ",["code","value"],"（或 ",["code","valuePropName"]," 指定的其他属性） ",["code","onChange"],"（或 ",["code","trigger"]," 指定的其他属性），数据同步将被 Form 接管，这会导致以下结果："],["ol",["li",["p","你",["strong","不再需要也不应该"],"用 ",["code","onChange"]," 来做数据收集同步（你可以使用 Form 的 ",["code","onValuesChange"],"），但还是可以继续监听 ",["code","onChange"]," 事件。"]],["li",["p","你不能用控件的 ",["code","value"]," 或 ",["code","defaultValue"]," 等属性来设置表单域的值，默认值可以用 Form 里的 ",["code","initialValues"]," 来设置。注意 ",["code","initialValues"]," 不能被 ",["code","setState"]," 动态更新，你需要用 ",["code","setFieldsValue"]," 来更新。"]],["li",["p","你不应该用 ",["code","setState"],"，可以使用 ",["code","form.setFieldsValue"]," 来动态改变表单值。"]]],["h3","dependencies"],["p","当字段间存在依赖关系时使用。如果一个字段设置了 ",["code","dependencies"]," 属性。那么它所依赖的字段更新时，该字段将自动触发更新与校验。一种常见的场景，就是注册用户表单的“密码”与“确认密码”字段。“确认密码”校验依赖于“密码”字段，设置 ",["code","dependencies"]," 后，“密码”字段更新会重新触发“校验密码”的校验逻辑。"],["p",["code","dependencies"]," 不应和 ",["code","shouldUpdate"]," 一起使用，因为这可能带来更新逻辑的混乱。"],["h3","FeedbackIcons"],["p",["code","({ status: ValidateStatus, errors: ReactNode, warnings: ReactNode }) => Record<ValidateStatus, ReactNode>"]],["h3","shouldUpdate"],["p","Form 通过增量更新方式，只更新被修改的字段相关组件以达到性能优化目的。大部分场景下，你只需要编写代码或者与 ",["a",{title:null,href:"#dependencies"},["code","dependencies"]]," 属性配合校验即可。而在某些特定场景，例如修改某个字段值后出现新的字段选项、或者纯粹希望表单任意变化都对某一个区域进行渲染。你可以通过 ",["code","shouldUpdate"]," 修改 Form.Item 的更新逻辑。"],["p","当 ",["code","shouldUpdate"]," 为 ",["code","true"]," 时，Form 的任意变化都会使该 Form.Item 重新渲染。这对于自定义渲染一些区域十分有帮助，要注意 Form.Item 里包裹的子组件必须由函数返回，否则 ",["code","shouldUpdate"]," 不会起作用："],["pre",{lang:"jsx",highlighted:'<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Form.Item</span> <span class="token attr-name">shouldUpdate</span><span class="token punctuation">></span></span>\n  <span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>pre</span><span class="token punctuation">></span></span><span class="token punctuation">{</span>JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>form<span class="token punctuation">.</span><span class="token function">getFieldsValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>pre</span><span class="token punctuation">></span></span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">}</span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Form.Item</span><span class="token punctuation">></span></span>'},["code","<Form.Item shouldUpdate>\n  {() => {\n    return <pre>{JSON.stringify(form.getFieldsValue(), null, 2)}</pre>;\n  }}\n</Form.Item>"]],["p","当 ",["code","shouldUpdate"]," 为方法时，表单的每次数值更新都会调用该方法，提供原先的值与当前的值以供你比较是否需要更新。这对于是否根据值来渲染额外字段十分有帮助："],["pre",{lang:"jsx",highlighted:'<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Form.Item</span> <span class="token attr-name">shouldUpdate</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span>prevValues<span class="token punctuation">,</span> curValues<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> prevValues<span class="token punctuation">.</span>additional <span class="token operator">!==</span> curValues<span class="token punctuation">.</span>additional<span class="token punctuation">}</span></span><span class="token punctuation">></span></span>\n  <span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token punctuation">(</span>\n      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Form.Item</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>other<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Input</span> <span class="token punctuation">/></span></span>\n      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Form.Item</span><span class="token punctuation">></span></span>\n    <span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">}</span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Form.Item</span><span class="token punctuation">></span></span>'},["code",'<Form.Item shouldUpdate={(prevValues, curValues) => prevValues.additional !== curValues.additional}>\n  {() => {\n    return (\n      <Form.Item name="other">\n        <Input />\n      </Form.Item>\n    );\n  }}\n</Form.Item>']],["h3","messageVariables"],["p","你可以通过 ",["code","messageVariables"]," 修改 Form.Item 的默认验证信息。"],["pre",{lang:"jsx",highlighted:'<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Form</span><span class="token punctuation">></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Form.Item</span>\n    <span class="token attr-name">messageVariables</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span> another<span class="token punctuation">:</span> <span class="token string">\'good\'</span> <span class="token punctuation">}</span><span class="token punctuation">}</span></span>\n    <span class="token attr-name">label</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>user<span class="token punctuation">"</span></span>\n    <span class="token attr-name">rules</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">[</span><span class="token punctuation">{</span> required<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> message<span class="token punctuation">:</span> <span class="token string">\'${another} is required\'</span> <span class="token punctuation">}</span></span><span class="token attr-name">]}</span>\n  <span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Input</span> <span class="token punctuation">/></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Form.Item</span><span class="token punctuation">></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Form.Item</span>\n    <span class="token attr-name">messageVariables</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span> label<span class="token punctuation">:</span> <span class="token string">\'good\'</span> <span class="token punctuation">}</span><span class="token punctuation">}</span></span>\n    <span class="token attr-name">label={&lt;span</span><span class="token punctuation">></span></span>user<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token punctuation">}</span>\n    rules<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">[</span><span class="token punctuation">{</span> required<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> message<span class="token punctuation">:</span> <span class="token string">\'${label} is required\'</span> <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">}</span>\n  <span class="token operator">></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Input</span> <span class="token punctuation">/></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Form.Item</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Form</span><span class="token punctuation">></span></span>'},["code","<Form>\n  <Form.Item\n    messageVariables={{ another: 'good' }}\n    label=\"user\"\n    rules={[{ required: true, message: '${another} is required' }]}\n  >\n    <Input />\n  </Form.Item>\n  <Form.Item\n    messageVariables={{ label: 'good' }}\n    label={<span>user</span>}\n    rules={[{ required: true, message: '${label} is required' }]}\n  >\n    <Input />\n  </Form.Item>\n</Form>"]],["h2","Form.List"],["p","为字段提供数组化管理。"],["table",["thead",["tr",["th","参数"],["th","说明"],["th","类型"],["th","默认值"]]],["tbody",["tr",["td","children"],["td","渲染函数"],["td","(fields: Field","[","], operation: { add, remove, move }, meta: { errors }) => React.ReactNode"],["td","-"]],["tr",["td","initialValue"],["td","设置子元素默认值，如果与 Form 的 ",["code","initialValues"]," 冲突则以 Form 为准"],["td","any","[","]"],["td","-"]],["tr",["td","name"],["td","字段名，支持数组。List 本身也是字段，因而 ",["code","getFieldsValue()"]," 默认会返回 List 下所有值，你可以通过",["a",{title:null,href:"#getfieldsvalue"},"参数"],"改变这一行为"],["td",["a",{title:null,href:"#namepath"},"NamePath"]],["td","-"]],["tr",["td","rules"],["td","校验规则，仅支持自定义规则。需要配合 ",["a",{title:null,href:"#formerrorlist"},"ErrorList"]," 一同使用。"],["td","{ validator, message }","[","]"],["td","-"]]]],["pre",{lang:"tsx",highlighted:'<span class="token operator">&lt;</span>Form<span class="token punctuation">.</span>List<span class="token operator">></span>\n  {<span class="token punctuation">(</span>fields<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span>\n    fields<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>field<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span>\n      <span class="token operator">&lt;</span>Form<span class="token punctuation">.</span>Item {<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>field}<span class="token operator">></span>\n        <span class="token operator">&lt;</span>Input <span class="token operator">/</span><span class="token operator">></span>\n      <span class="token operator">&lt;</span><span class="token operator">/</span>Form<span class="token punctuation">.</span>Item<span class="token operator">></span>\n    <span class="token punctuation">)</span><span class="token punctuation">)</span>\n  }\n<span class="token operator">&lt;</span><span class="token operator">/</span>Form<span class="token punctuation">.</span>List<span class="token operator">></span>'},["code","<Form.List>\n  {(fields) =>\n    fields.map((field) => (\n      <Form.Item {...field}>\n        <Input />\n      </Form.Item>\n    ))\n  }\n</Form.List>"]],["p","注意：Form.List 下的字段不应该配置 ",["code","initialValue"],"，你始终应该通过 Form.List 的 ",["code","initialValue"]," 或者 Form 的 ",["code","initialValues"]," 来配置。"],["h2","operation"],["p","Form.List 渲染表单相关操作函数。"],["table",["thead",["tr",["th","参数"],["th","说明"],["th","类型"],["th","默认值"]]],["tbody",["tr",["td","add"],["td","新增表单项"],["td","(defaultValue?: any, insertIndex?: number) => void"],["td","insertIndex"]],["tr",["td","move"],["td","移动表单项"],["td","(from: number, to: number) => void"],["td","-"]],["tr",["td","remove"],["td","删除表单项"],["td","(index: number ","|"," number","[","]) => void"],["td","number","[","]"]]]],["h2","Form.ErrorList"],["p","错误展示组件，仅限配合 Form.List 的 rules 一同使用。参考",["a",{title:null,href:"https://ant.design/components/form-cn#components-form-demo-dynamic-form-item"},"示例"],"。"],["table",["thead",["tr",["th","参数"],["th","说明"],["th","类型"],["th","默认值"]]],["tbody",["tr",["td","errors"],["td","错误列表"],["td","ReactNode","[","]"],["td","-"]],["tr",["td","styles"],["td","语义化结构 style"],["td",["a",{title:null,href:"#validatestatusstyle-语义化样式"},"ValidateStatusStyle"]],["td","-"]]]],["h2","Form.Provider"],["p","提供表单间联动功能，其下设置 ",["code","name"]," 的 Form 更新时，会自动触发对应事件。查看",["a",{title:null,href:"https://ant.design/components/form-cn#components-form-demo-form-context"},"示例"],"。"],["table",["thead",["tr",["th","参数"],["th","说明"],["th","类型"],["th","默认值"]]],["tbody",["tr",["td","onFormChange"],["td","子表单字段更新时触发"],["td","function(formName: string, info: { changedFields, forms })"],["td","-"]],["tr",["td","onFormFinish"],["td","子表单提交时触发"],["td","function(formName: string, info: { values, forms })"],["td","-"]]]],["pre",{lang:"jsx",highlighted:'<span class="token operator">&lt;</span>Form<span class="token punctuation">.</span>Provider\n  onFormFinish<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>name <span class="token operator">===</span> <span class="token string">\'form1\'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token comment" spellcheck="true">// Do something...</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span><span class="token punctuation">}</span>\n<span class="token operator">></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Form</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>form1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token operator">...</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Form</span><span class="token punctuation">></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Form</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>form2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token operator">...</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Form</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Form.Provider</span><span class="token punctuation">></span></span>'},["code",'<Form.Provider\n  onFormFinish={(name) => {\n    if (name === \'form1\') {\n      // Do something...\n    }\n  }}\n>\n  <Form name="form1">...</Form>\n  <Form name="form2">...</Form>\n</Form.Provider>']],["h3","FormInstance"],["table",["thead",["tr",["th","名称"],["th","说明"],["th","类型"]]],["tbody",["tr",["td","getFieldError"],["td","获取对应字段名的错误信息"],["td","(name: ",["a",{title:null,href:"#namepath"},"NamePath"],") => string","[","]"]],["tr",["td","getFieldInstance"],["td","获取对应字段实例"],["td","(name: ",["a",{title:null,href:"#namepath"},"NamePath"],") => any"]],["tr",["td","getFieldsError"],["td","获取一组字段名对应的错误信息，返回为数组形式"],["td","(nameList?: ",["a",{title:null,href:"#namepath"},"NamePath"],"[","]) => FieldError","[","]"]],["tr",["td","getFieldsValue"],["td","获取一组字段名对应的值，会按照对应结构返回。默认返回现存字段值，当调用 ",["code","getFieldsValue(true)"]," 时返回所有值"],["td",["a",{title:null,href:"#getfieldsvalue"},"GetFieldsValue"]]],["tr",["td","getFieldValue"],["td","获取对应字段名的值"],["td","(name: ",["a",{title:null,href:"#namepath"},"NamePath"],") => any"]],["tr",["td","isFieldsTouched"],["td","检查一组字段是否被用户操作过，",["code","allTouched"]," 为 ",["code","true"]," 时检查是否所有字段都被操作过"],["td","(nameList?: ",["a",{title:null,href:"#namepath"},"NamePath"],"[","], allTouched?: boolean) => boolean"]],["tr",["td","isFieldTouched"],["td","检查对应字段是否被用户操作过"],["td","(name: ",["a",{title:null,href:"#namepath"},"NamePath"],") => boolean"]],["tr",["td","isFieldValidating"],["td","检查对应字段是否正在校验"],["td","(name: ",["a",{title:null,href:"#namepath"},"NamePath"],") => boolean"]],["tr",["td","resetFields"],["td","重置一组字段到 ",["code","initialValues"]],["td","(fields?: ",["a",{title:null,href:"#namepath"},"NamePath"],"[","]) => void"]],["tr",["td","scrollToField"],["td","滚动到对应字段位置"],["td","(name: ",["a",{title:null,href:"#namepath"},"NamePath"],", options: ",["a",{title:null,href:"https://github.com/stipsan/scroll-into-view-if-needed/tree/ece40bd9143f48caf4b99503425ecb16b0ad8249#options"},"ScrollOptions"],") => void"]],["tr",["td","setFields"],["td","设置一组字段状态"],["td","(fields: ",["a",{title:null,href:"#fielddata"},"FieldData"],"[","]) => void"]],["tr",["td","setFieldValue"],["td","设置表单的值（该值将直接传入 form store 中并且",["strong","重置错误信息"],"。如果你不希望传入对象被修改，请克隆后传入）"],["td","(name: ",["a",{title:null,href:"#namepath"},"NamePath"],", value: any) => void"]],["tr",["td","setFieldsValue"],["td","设置表单的值（该值将直接传入 form store 中并且",["strong","重置错误信息"],"。如果你不希望传入对象被修改，请克隆后传入）。如果你只想修改 Form.List 中单项值，请通过 ",["code","setFieldValue"]," 进行指定"],["td","(values) => void"]],["tr",["td","submit"],["td","提交表单，与点击 ",["code","submit"]," 按钮效果相同"],["td","() => void"]],["tr",["td","validateFields"],["td","触发表单验证，设置 ",["code","recursive"]," 时会递归校验所有包含的路径"],["td","(nameList?: ",["a",{title:null,href:"#namepath"},"NamePath"],"[","], config?: ",["a",{title:null,href:"#validateFields"},"ValidateConfig"],") => Promise"]]]],["h4","validateFields"],["pre",{lang:"tsx",highlighted:'export interface ValidateConfig {\n  <span class="token operator">/</span><span class="token operator">/</span> 仅校验内容而不会将错误信息展示到 UI 上。\n  validateOnly<span class="token operator">?</span><span class="token punctuation">:</span> boolean<span class="token comment" spellcheck="true">;</span>\n  <span class="token operator">/</span><span class="token operator">/</span> 对提供的 `nameList` 与其子路径进行递归校验。\n  recursive<span class="token operator">?</span><span class="token punctuation">:</span> boolean<span class="token comment" spellcheck="true">;</span>\n  <span class="token operator">/</span><span class="token operator">/</span> 校验 dirty 的字段（touched <span class="token operator">+</span> validated）。\n  <span class="token operator">/</span><span class="token operator">/</span> 使用 `dirty` 可以很方便的仅校验用户操作过和被校验过的字段。\n  dirty<span class="token operator">?</span><span class="token punctuation">:</span> boolean<span class="token comment" spellcheck="true">;</span>\n}'},["code","export interface ValidateConfig {\n  // 仅校验内容而不会将错误信息展示到 UI 上。\n  validateOnly?: boolean;\n  // 对提供的 `nameList` 与其子路径进行递归校验。\n  recursive?: boolean;\n  // 校验 dirty 的字段（touched + validated）。\n  // 使用 `dirty` 可以很方便的仅校验用户操作过和被校验过的字段。\n  dirty?: boolean;\n}"]],["p","返回示例："],["pre",{lang:"jsx",highlighted:'<span class="token function">validateFields</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span>values<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>\n    <span class="token comment" spellcheck="true">/*\n  values:\n    {\n      username: \'username\',\n      password: \'password\',\n    }\n  */</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span>\n  <span class="token punctuation">.</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span>errorInfo<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>\n    <span class="token comment" spellcheck="true">/*\n    errorInfo:\n      {\n        values: {\n          username: \'username\',\n          password: \'password\',\n        },\n        errorFields: [\n          { name: [\'password\'], errors: [\'Please input your Password!\'] },\n        ],\n        outOfDate: false,\n      }\n    */</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>'},["code","validateFields()\n  .then((values) => {\n    /*\n  values:\n    {\n      username: 'username',\n      password: 'password',\n    }\n  */\n  })\n  .catch((errorInfo) => {\n    /*\n    errorInfo:\n      {\n        values: {\n          username: 'username',\n          password: 'password',\n        },\n        errorFields: [\n          { name: ['password'], errors: ['Please input your Password!'] },\n        ],\n        outOfDate: false,\n      }\n    */\n  });"]],["h3","FormItemStyle 语义化样式"],["pre",{lang:"typescript",highlighted:'<span class="token keyword">interface</span> <span class="token class-name">FormItemStyle</span> <span class="token keyword">extends</span> <span class="token class-name">ListItemStyle</span> <span class="token punctuation">{</span>\n  formitemRow<span class="token punctuation">:</span> ViewStyle\n  formitemColumn<span class="token punctuation">:</span> ViewStyle\n  formItemExtra<span class="token punctuation">:</span> ViewStyle <span class="token operator">|</span> TextStyle  <span class="token comment" spellcheck="true">// default: { maxWidth: 50% } as ListItem[\'extra\']</span>\n  formItemLabel<span class="token punctuation">:</span> ViewStyle              <span class="token comment" spellcheck="true">// default: { minWidth: 65 }</span>\n  formItemLabelText<span class="token punctuation">:</span> ViewStyle <span class="token operator">|</span> TextStyle\n  formItemControl<span class="token punctuation">:</span> ViewStyle            <span class="token comment" spellcheck="true">// children style</span>\n  asterisk<span class="token punctuation">:</span> TextStyle                   <span class="token comment" spellcheck="true">// required={true}</span>\n  optional<span class="token punctuation">:</span> TextStyle                   <span class="token comment" spellcheck="true">// requiredMark="optional"</span>\n<span class="token punctuation">}</span>'},["code","interface FormItemStyle extends ListItemStyle {\n  formitemRow: ViewStyle\n  formitemColumn: ViewStyle\n  formItemExtra: ViewStyle | TextStyle  // default: { maxWidth: 50% } as ListItem['extra']\n  formItemLabel: ViewStyle              // default: { minWidth: 65 }\n  formItemLabelText: ViewStyle | TextStyle\n  formItemControl: ViewStyle            // children style\n  asterisk: TextStyle                   // required={true}\n  optional: TextStyle                   // requiredMark=\"optional\"\n}"]],["h3","ValidateStatusStyle 语义化样式"],["p","当设置",["code","validateStatus"],"时"],["pre",{lang:"typescript",highlighted:'<span class="token keyword">interface</span> <span class="token class-name">ValidateStatusStyle</span> <span class="token punctuation">{</span>\n  error<span class="token punctuation">:</span> TextStyle\n  warning<span class="token punctuation">:</span> TextStyle\n  success<span class="token punctuation">:</span> TextStyle\n  validating<span class="token punctuation">:</span> TextStyle\n  feedbackIcon<span class="token punctuation">:</span> ViewStyle\n<span class="token punctuation">}</span>'},["code","interface ValidateStatusStyle {\n  error: TextStyle\n  warning: TextStyle\n  success: TextStyle\n  validating: TextStyle\n  feedbackIcon: ViewStyle\n}"]],["h2","Hooks"],["h3","Form.useForm"],["p",["code","type Form.useForm = (): [FormInstance]"]],["p","创建 Form 实例，用于管理所有数据状态。"],["h3","Form.useFormInstance"],["p",["code","type Form.useFormInstance = (): FormInstance"]],["p","获取当前上下文正在使用的 Form 实例，常见于封装子组件消费无需透传 Form 实例："],["pre",{lang:"tsx",highlighted:'<span class="token keyword">const</span> Sub <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> {\n  <span class="token keyword">const</span> form <span class="token operator">=</span> Form<span class="token punctuation">.</span><span class="token function">useFormInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">;</span>\n\n  return <span class="token operator">&lt;</span>Button onClick<span class="token operator">=</span>{<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> form<span class="token punctuation">.</span><span class="token function">setFieldsValue</span><span class="token punctuation">(</span>{}<span class="token punctuation">)</span>} <span class="token operator">/</span><span class="token operator">></span><span class="token comment" spellcheck="true">;</span>\n}<span class="token comment" spellcheck="true">;</span>\n\nexport <span class="token keyword">default</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> {\n  <span class="token keyword">const</span> <span class="token punctuation">[</span>form<span class="token punctuation">]</span> <span class="token operator">=</span> Form<span class="token punctuation">.</span><span class="token function">useForm</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">;</span>\n\n  return <span class="token punctuation">(</span>\n    <span class="token operator">&lt;</span>Form form<span class="token operator">=</span>{form}<span class="token operator">></span>\n      <span class="token operator">&lt;</span>Sub <span class="token operator">/</span><span class="token operator">></span>\n    <span class="token operator">&lt;</span><span class="token operator">/</span>Form<span class="token operator">></span>\n  <span class="token punctuation">)</span><span class="token comment" spellcheck="true">;</span>\n}<span class="token comment" spellcheck="true">;</span>'},["code","const Sub = () => {\n  const form = Form.useFormInstance();\n\n  return <Button onClick={() => form.setFieldsValue({})} />;\n};\n\nexport default () => {\n  const [form] = Form.useForm();\n\n  return (\n    <Form form={form}>\n      <Sub />\n    </Form>\n  );\n};"]],["h3","Form.useWatch"],["p",["code","type Form.useWatch = (namePath: NamePath | (selector: (values: Store)) => any, formInstance?: FormInstance | WatchOptions): Value"]],["p","用于直接获取 form 中字段对应的值。通过该 Hooks 可以与诸如 ",["code","useSWR"]," 进行联动从而降低维护成本："],["pre",{lang:"tsx",highlighted:'<span class="token keyword">const</span> Demo <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> {\n  <span class="token keyword">const</span> <span class="token punctuation">[</span>form<span class="token punctuation">]</span> <span class="token operator">=</span> Form<span class="token punctuation">.</span><span class="token function">useForm</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">;</span>\n  <span class="token keyword">const</span> userName <span class="token operator">=</span> Form<span class="token punctuation">.</span><span class="token function">useWatch</span><span class="token punctuation">(</span><span class="token string">\'username\'</span><span class="token punctuation">,</span> form<span class="token punctuation">)</span><span class="token comment" spellcheck="true">;</span>\n\n  <span class="token keyword">const</span> { data<span class="token punctuation">:</span> options } <span class="token operator">=</span> <span class="token function">useSWR</span><span class="token punctuation">(</span>`<span class="token operator">/</span>api<span class="token operator">/</span>user<span class="token operator">/</span>${userName}`<span class="token punctuation">,</span> fetcher<span class="token punctuation">)</span><span class="token comment" spellcheck="true">;</span>\n\n  return <span class="token punctuation">(</span>\n    <span class="token operator">&lt;</span>Form form<span class="token operator">=</span>{form}<span class="token operator">></span>\n      <span class="token operator">&lt;</span>Form<span class="token punctuation">.</span>Item name<span class="token operator">=</span><span class="token string">"username"</span><span class="token operator">></span>\n        <span class="token operator">&lt;</span>AutoComplete options<span class="token operator">=</span>{options} <span class="token operator">/</span><span class="token operator">></span>\n      <span class="token operator">&lt;</span><span class="token operator">/</span>Form<span class="token punctuation">.</span>Item<span class="token operator">></span>\n    <span class="token operator">&lt;</span><span class="token operator">/</span>Form<span class="token operator">></span>\n  <span class="token punctuation">)</span><span class="token comment" spellcheck="true">;</span>\n}<span class="token comment" spellcheck="true">;</span>'},["code","const Demo = () => {\n  const [form] = Form.useForm();\n  const userName = Form.useWatch('username', form);\n\n  const { data: options } = useSWR(`/api/user/${userName}`, fetcher);\n\n  return (\n    <Form form={form}>\n      <Form.Item name=\"username\">\n        <AutoComplete options={options} />\n      </Form.Item>\n    </Form>\n  );\n};"]],["p","如果你的组件被包裹在 ",["code","Form.Item"]," 内部，你可以省略第二个参数，",["code","Form.useWatch"]," 会自动找到上层最近的 ",["code","FormInstance"],"。"],["p",["code","useWatch"]," 默认只监听在 Form 中注册的字段，如果需要监听非注册字段，可以通过配置 ",["code","preserve"]," 进行监听："],["pre",{lang:"tsx",highlighted:'<span class="token keyword">const</span> Demo <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> {\n  <span class="token keyword">const</span> <span class="token punctuation">[</span>form<span class="token punctuation">]</span> <span class="token operator">=</span> Form<span class="token punctuation">.</span><span class="token function">useForm</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">;</span>\n\n  <span class="token keyword">const</span> age <span class="token operator">=</span> Form<span class="token punctuation">.</span><span class="token function">useWatch</span><span class="token punctuation">(</span><span class="token string">\'age\'</span><span class="token punctuation">,</span> { form<span class="token punctuation">,</span> preserve<span class="token punctuation">:</span> <span class="token boolean">true</span> }<span class="token punctuation">)</span><span class="token comment" spellcheck="true">;</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span><span class="token comment" spellcheck="true">;</span>\n\n  return <span class="token punctuation">(</span>\n    <span class="token operator">&lt;</span>div<span class="token operator">></span>\n      <span class="token operator">&lt;</span>Button onClick<span class="token operator">=</span>{<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> form<span class="token punctuation">.</span><span class="token function">setFieldValue</span><span class="token punctuation">(</span><span class="token string">\'age\'</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>}<span class="token operator">></span>Update<span class="token operator">&lt;</span><span class="token operator">/</span>Button<span class="token operator">></span>\n      <span class="token operator">&lt;</span>Form form<span class="token operator">=</span>{form}<span class="token operator">></span>\n        <span class="token operator">&lt;</span>Form<span class="token punctuation">.</span>Item name<span class="token operator">=</span><span class="token string">"name"</span><span class="token operator">></span>\n          <span class="token operator">&lt;</span>Input <span class="token operator">/</span><span class="token operator">></span>\n        <span class="token operator">&lt;</span><span class="token operator">/</span>Form<span class="token punctuation">.</span>Item<span class="token operator">></span>\n      <span class="token operator">&lt;</span><span class="token operator">/</span>Form<span class="token operator">></span>\n    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>\n  <span class="token punctuation">)</span><span class="token comment" spellcheck="true">;</span>\n}<span class="token comment" spellcheck="true">;</span>'},["code","const Demo = () => {\n  const [form] = Form.useForm();\n\n  const age = Form.useWatch('age', { form, preserve: true });\n  console.log(age);\n\n  return (\n    <div>\n      <Button onClick={() => form.setFieldValue('age', 2)}>Update</Button>\n      <Form form={form}>\n        <Form.Item name=\"name\">\n          <Input />\n        </Form.Item>\n      </Form>\n    </div>\n  );\n};"]],["h3","Form.Item.useStatus"],["p",["code","type Form.Item.useStatus = (): { status: ValidateStatus | undefined, errors: ReactNode[], warnings: ReactNode[] }"]],["p","可用于获取当前 Form.Item 的校验状态，如果上层没有 Form.Item，",["code","status"]," 将会返回 ",["code","undefined"],"。",["code","errors"]," 和 ",["code","warnings"]," 可用于获取当前 Form.Item 的错误信息和警告信息："],["pre",{lang:"tsx",highlighted:'<span class="token keyword">const</span> CustomInput <span class="token operator">=</span> <span class="token punctuation">(</span>{ value<span class="token punctuation">,</span> onChange }<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> {\n  <span class="token keyword">const</span> { status<span class="token punctuation">,</span> errors } <span class="token operator">=</span> Form<span class="token punctuation">.</span>Item<span class="token punctuation">.</span><span class="token function">useStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">;</span>\n  return <span class="token punctuation">(</span>\n    <span class="token operator">&lt;</span>input\n      value<span class="token operator">=</span>{value}\n      onChange<span class="token operator">=</span>{onChange}\n      className<span class="token operator">=</span>{`custom<span class="token operator">-</span>input<span class="token operator">-</span>${status}`}\n      placeholder<span class="token operator">=</span>{<span class="token punctuation">(</span>errors<span class="token punctuation">.</span>length <span class="token operator">&amp;</span><span class="token operator">&amp;</span> errors<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> || <span class="token string">\'\'</span>}\n    <span class="token operator">/</span><span class="token operator">></span>\n  <span class="token punctuation">)</span><span class="token comment" spellcheck="true">;</span>\n}<span class="token comment" spellcheck="true">;</span>\n\nexport <span class="token keyword">default</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span>\n  <span class="token operator">&lt;</span>Form<span class="token operator">></span>\n    <span class="token operator">&lt;</span>Form<span class="token punctuation">.</span>Item name<span class="token operator">=</span><span class="token string">"username"</span><span class="token operator">></span>\n      <span class="token operator">&lt;</span>CustomInput <span class="token operator">/</span><span class="token operator">></span>\n    <span class="token operator">&lt;</span><span class="token operator">/</span>Form<span class="token punctuation">.</span>Item<span class="token operator">></span>\n  <span class="token operator">&lt;</span><span class="token operator">/</span>Form<span class="token operator">></span>\n<span class="token punctuation">)</span><span class="token comment" spellcheck="true">;</span>'},["code","const CustomInput = ({ value, onChange }) => {\n  const { status, errors } = Form.Item.useStatus();\n  return (\n    <input\n      value={value}\n      onChange={onChange}\n      className={`custom-input-${status}`}\n      placeholder={(errors.length && errors[0]) || ''}\n    />\n  );\n};\n\nexport default () => (\n  <Form>\n    <Form.Item name=\"username\">\n      <CustomInput />\n    </Form.Item>\n  </Form>\n);"]],["h4","与其他获取数据的方式的区别"],["p","Form 仅会对变更的 Field 进行刷新，从而避免完整的组件刷新可能引发的性能问题。因而你无法在 render 阶段通过 ",["code","form.getFieldsValue"]," 来实时获取字段值，而 ",["code","useWatch"]," 提供了一种特定字段访问的方式，从而使得在当前组件中可以直接消费字段的值。同时，如果为了更好的渲染性能，你可以通过 Field 的 renderProps 仅更新需要更新的部分。而当当前组件更新或者 effect 都不需要消费字段值时，则可以通过 ",["code","onValuesChange"]," 将数据抛出，从而避免组件更新。"],["h3","Interface"],["h4","NamePath"],["p",["code","string | number | (string | number)[]"]],["h4","GetFieldsValue"],["p",["code","getFieldsValue"]," 提供了多种重载方法："],["h5","getFieldsValue(nameList?: true | ",["a",{title:null,href:"#namepath"},"NamePath"],"[","], filterFunc?: FilterFunc)"],["p","当不提供 ",["code","nameList"]," 时，返回所有注册字段，这也包含 List 下所有的值（即便 List 下没有绑定 Item）。"],["p","当 ",["code","nameList"]," 为 ",["code","true"]," 时，返回 store 中所有的值，包含未注册字段。例如通过 ",["code","setFieldsValue"]," 设置了不存在的 Item 的值，也可以通过 ",["code","true"]," 全部获取。"],["p","当 ",["code","nameList"]," 为数组时，返回规定路径的值。需要注意的是，",["code","nameList"]," 为嵌套数组。例如你需要某路径值应该如下："],["pre",{lang:"tsx",highlighted:'<span class="token operator">/</span><span class="token operator">/</span> 单个路径\nform<span class="token punctuation">.</span><span class="token function">getFieldsValue</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">\'user\'</span><span class="token punctuation">,</span> <span class="token string">\'age\'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">;</span>\n\n<span class="token operator">/</span><span class="token operator">/</span> 多个路径\nform<span class="token punctuation">.</span><span class="token function">getFieldsValue</span><span class="token punctuation">(</span><span class="token punctuation">[</span>\n  <span class="token punctuation">[</span><span class="token string">\'user\'</span><span class="token punctuation">,</span> <span class="token string">\'age\'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token punctuation">[</span><span class="token string">\'preset\'</span><span class="token punctuation">,</span> <span class="token string">\'account\'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">;</span>'},["code","// 单个路径\nform.getFieldsValue([['user', 'age']]);\n\n// 多个路径\nform.getFieldsValue([\n  ['user', 'age'],\n  ['preset', 'account'],\n]);"]],["h5","getFieldsValue({ strict?: boolean, filter?: FilterFunc })"],["p","当 ",["code","strict"]," 为 ",["code","true"]," 时会仅匹配 Item 的值。例如 ",["code","{ list: [{ bamboo: 1, little: 2 }] }"]," 中，如果 List 仅绑定了 ",["code","bamboo"]," 字段，那么 ",["code","getFieldsValue({ strict: true })"]," 会只获得 ",["code","{ list: [{ bamboo: 1 }] }"],"。"],["h4","FilterFunc"],["p","用于过滤一些字段值，",["code","meta"]," 会返回字段相关信息。例如可以用来获取仅被用户修改过的值等等。"],["pre",{lang:"tsx",highlighted:'type FilterFunc <span class="token operator">=</span> <span class="token punctuation">(</span>meta<span class="token punctuation">:</span> { touched<span class="token punctuation">:</span> boolean<span class="token comment" spellcheck="true">; validating: boolean }) => boolean;</span>'},["code","type FilterFunc = (meta: { touched: boolean; validating: boolean }) => boolean;"]],["h4","FieldData"],["table",["thead",["tr",["th","名称"],["th","说明"],["th","类型"]]],["tbody",["tr",["td","errors"],["td","错误信息"],["td","string","[","]"]],["tr",["td","warnings"],["td","警告信息"],["td","string","[","]"]],["tr",["td","name"],["td","字段名称"],["td",["a",{title:null,href:"#namepath"},"NamePath"],"[","]"]],["tr",["td","touched"],["td","是否被用户操作过"],["td","boolean"]],["tr",["td","validating"],["td","是否正在校验"],["td","boolean"]],["tr",["td","value"],["td","字段对应值"],["td","any"]]]],["h4","Rule"],["p","Rule 支持接收 object 进行配置，也支持 function 来动态获取 form 的数据："],["pre",{lang:"tsx",highlighted:'type Rule <span class="token operator">=</span> RuleConfig | <span class="token punctuation">(</span><span class="token punctuation">(</span>form<span class="token punctuation">:</span> FormInstance<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> RuleConfig<span class="token punctuation">)</span><span class="token comment" spellcheck="true">;</span>'},["code","type Rule = RuleConfig | ((form: FormInstance) => RuleConfig);"]],["table",["thead",["tr",["th","名称"],["th","说明"],["th","类型"]]],["tbody",["tr",["td","defaultField"],["td","仅在 ",["code","type"]," 为 ",["code","array"]," 类型时有效，用于指定数组元素的校验规则"],["td",["a",{title:null,href:"#rule"},"rule"]]],["tr",["td","enum"],["td","是否匹配枚举中的值（需要将 ",["code","type"]," 设置为 ",["code","enum"],"）"],["td","any","[","]"]],["tr",["td","fields"],["td","仅在 ",["code","type"]," 为 ",["code","array"]," 或 ",["code","object"]," 类型时有效，用于指定子元素的校验规则"],["td","Record","<","string, ",["a",{title:null,href:"#rule"},"rule"],">"]],["tr",["td","len"],["td","string 类型时为字符串长度；number 类型时为确定数字； array 类型时为数组长度"],["td","number"]],["tr",["td","max"],["td","必须设置 ",["code","type"],"：string 类型为字符串最大长度；number 类型时为最大值；array 类型时为数组最大长度"],["td","number"]],["tr",["td","message"],["td","错误信息，不设置时会通过",["a",{title:null,href:"#validatemessages"},"模板"],"自动生成"],["td","string"]],["tr",["td","min"],["td","必须设置 ",["code","type"],"：string 类型为字符串最小长度；number 类型时为最小值；array 类型时为数组最小长度"],["td","number"]],["tr",["td","pattern"],["td","正则表达式匹配"],["td","RegExp"]],["tr",["td","required"],["td","是否为必选字段"],["td","boolean"]],["tr",["td","transform"],["td","将字段值转换成目标值后进行校验"],["td","(value) => any"]],["tr",["td","type"],["td","类型，常见有 ",["code","string"]," ","|",["code","number"]," ","|",["code","boolean"]," ","|",["code","url"]," ","|"," ",["code","email"],"。更多请参考",["a",{title:null,href:"https://github.com/yiminghe/async-validator#type"},"此处"]],["td","string"]],["tr",["td","validateTrigger"],["td","设置触发验证时机，必须是 Form.Item 的 ",["code","validateTrigger"]," 的子集"],["td","string ","|"," string","[","]"]],["tr",["td","validator"],["td","自定义校验，接收 Promise 作为返回值。",["a",{title:null,href:"https://ant.design/components/form-cn#components-form-demo-register"},"示例"],"参考"],["td","(",["a",{title:null,href:"#rule"},"rule"],", value) => Promise"]],["tr",["td","warningOnly"],["td","仅警告，不阻塞表单提交"],["td","boolean"]],["tr",["td","whitespace"],["td","如果字段仅包含空格则校验不通过，只在 ",["code","type: 'string'"]," 时生效"],["td","boolean"]]]],["h4","WatchOptions"],["table",["thead",["tr",["th","名称"],["th","说明"],["th","类型"],["th","默认值"]]],["tbody",["tr",["td","form"],["td","指定 Form 实例"],["td","FormInstance"],["td","当前 context 中的 Form"]],["tr",["td","preserve"],["td","是否监视没有对应的 ",["code","Form.Item"]," 的字段"],["td","boolean"],["td","false"]]]],["h2","FAQ"],["h3","Switch、Checkbox、Radio 为什么不能绑定数据？"],["p","Form.Item 默认绑定值属性到 ",["code","value"]," 上，而 Switch、Checkbox 等组件的值属性为 ",["code","checked"],"。你可以通过 ",["code","valuePropName"]," 来修改绑定的值属性。"],["pre",{lang:"tsx | pure",highlighted:'<span class="token operator">&lt;</span>Form<span class="token punctuation">.</span>Item name<span class="token operator">=</span><span class="token string">"fieldA"</span> valuePropName<span class="token operator">=</span><span class="token string">"checked"</span><span class="token operator">></span>\n  <span class="token operator">&lt;</span><span class="token keyword">Switch</span> <span class="token operator">/</span><span class="token operator">></span>\n<span class="token operator">&lt;</span><span class="token operator">/</span>Form<span class="token punctuation">.</span>Item<span class="token operator">></span>'},["code",'<Form.Item name="fieldA" valuePropName="checked">\n  <Switch />\n</Form.Item>']],["h3","Form.Item 如何配合 Picker / DatePicker 使用？"],["p","当Picker的 ",["code","children"]," 为 ",["code","List.Item"],"时，可以直接使用。\n",["br"],"注意，需要给Form.Item设置",["code","noStyle"],"属性"],["pre",{lang:"tsx",highlighted:'<span class="token operator">&lt;</span>Form<span class="token punctuation">.</span>Item name<span class="token operator">=</span><span class="token string">"address"</span> noStyle<span class="token operator">></span>\n  <span class="token operator">&lt;</span>Picker data<span class="token operator">=</span>{data} cols<span class="token operator">=</span>{<span class="token number">3</span>}<span class="token operator">></span>\n   <span class="token operator">&lt;</span>List<span class="token punctuation">.</span>Item<span class="token operator">></span>地址<span class="token operator">&lt;</span><span class="token operator">/</span>List<span class="token punctuation">.</span>Item<span class="token operator">></span>\n  <span class="token operator">&lt;</span><span class="token operator">/</span>Picker<span class="token operator">></span>\n<span class="token operator">&lt;</span><span class="token operator">/</span>Form<span class="token punctuation">.</span>Item<span class="token operator">></span>'},["code",'<Form.Item name="address" noStyle>\n  <Picker data={data} cols={3}>\n   <List.Item>地址</List.Item>\n  </Picker>\n</Form.Item>']],["p","不过我们推荐Form.Item和Input组合布局，即",["code","children"],"为非",["code","List.Item"],"时怎么使用？\n",["br"],"\n当",["code","children"],"为函数时，会提供",["code","toggle"],"参数来控制Picker的显示/隐藏。"],["pre",{lang:"tsx",highlighted:'<span class="token operator">&lt;</span>Form<span class="token punctuation">.</span>Item label<span class="token operator">=</span><span class="token string">"地址"</span> name<span class="token operator">=</span><span class="token string">"address"</span><span class="token operator">></span>\n  <span class="token operator">&lt;</span>Picker data<span class="token operator">=</span>{data} cols<span class="token operator">=</span>{<span class="token number">3</span>} <span class="token operator">></span>\n    {<span class="token punctuation">(</span>{ extra<span class="token punctuation">,</span> value<span class="token punctuation">,</span> toggle }<span class="token punctuation">:</span> any<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span>\n      <span class="token operator">&lt;</span>Input\n        value<span class="token operator">=</span>{value<span class="token operator">?</span><span class="token punctuation">.</span>length <span class="token operator">?</span> extra <span class="token punctuation">:</span> undefined}\n        onFocus<span class="token operator">=</span>{toggle}\n        placeholder<span class="token operator">=</span><span class="token string">"省/市/区"</span>\n      <span class="token operator">/</span><span class="token operator">></span>\n    <span class="token punctuation">)</span>}\n  <span class="token operator">&lt;</span><span class="token operator">/</span>Picker<span class="token operator">></span>\n<span class="token operator">&lt;</span><span class="token operator">/</span>Form<span class="token punctuation">.</span>Item<span class="token operator">></span>'},["code",'<Form.Item label="地址" name="address">\n  <Picker data={data} cols={3} >\n    {({ extra, value, toggle }: any) => (\n      <Input\n        value={value?.length ? extra : undefined}\n        onFocus={toggle}\n        placeholder="省/市/区"\n      />\n    )}\n  </Picker>\n</Form.Item>']],["p","其次可以通过ref"],["pre",{lang:"tsx",highlighted:'<span class="token keyword">const</span> pickerRef <span class="token operator">=</span> <span class="token function">useRef</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">;</span>\n\n<span class="token operator">&lt;</span>Form<span class="token punctuation">.</span>Item label<span class="token operator">=</span><span class="token string">"地址"</span> name<span class="token operator">=</span><span class="token string">"address"</span> onPress<span class="token operator">=</span>{<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span>pickerRef<span class="token punctuation">.</span>current<span class="token operator">?</span><span class="token punctuation">.</span><span class="token function">toggle</span><span class="token punctuation">(</span><span class="token punctuation">)</span>}<span class="token operator">></span>\n  <span class="token operator">&lt;</span>Picker data<span class="token operator">=</span>{data} cols<span class="token operator">=</span>{<span class="token number">3</span>} ref<span class="token operator">=</span>{pickerRef}<span class="token operator">></span>\n    <span class="token operator">&lt;</span>Input placeholder<span class="token operator">=</span><span class="token string">"省/市/区"</span><span class="token operator">/</span><span class="token operator">></span>\n  <span class="token operator">&lt;</span><span class="token operator">/</span>Picker<span class="token operator">></span>\n<span class="token operator">&lt;</span><span class="token operator">/</span>Form<span class="token punctuation">.</span>Item<span class="token operator">></span>'},["code",'const pickerRef = useRef();\n\n<Form.Item label="地址" name="address" onPress={()=>pickerRef.current?.toggle()}>\n  <Picker data={data} cols={3} ref={pickerRef}>\n    <Input placeholder="省/市/区"/>\n  </Picker>\n</Form.Item>']],["h3","有更多参考文档吗？"],["ul",["li",["p",["a",{title:null,href:"https://ant.design/components/form-cn#%E6%9C%89%E6%9B%B4%E5%A4%9A%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3%E5%90%97"},"antd#有更多参考文档吗？"]]]]],meta:{category:"Components",type:"Data Entry",title:"Form",subtitle:"表单",version:"5.2.0-rc.0",filename:"components/form/index.zh-CN.md"}}}}]);