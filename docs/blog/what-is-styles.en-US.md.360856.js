(self.webpackChunk_ant_design_react_native=self.webpackChunk_ant_design_react_native||[]).push([[7420],{38447:n=>{n.exports={content:["article",["p","2024-08-08 ",["a",{title:null,href:"https://github.com/1uokun"},"@1uokun"]],["h2","What is CSS-in-JS?"],["p","Before we talk about what ",["code","styles"]," is, let's first briefly understand what CSS-in-JS is?"],["p","CSS-in-JS is a technique where CSS styles are written directly within JavaScript code, allowing developers to define and use styles within JavaScript files."],["p","Common CSS-in-JS libraries include:"],["ul",["li",["p",["a",{title:null,href:"https://github.com/styled-components/styled-components"},"Styled-Components"],": Allows you to define styles using ES6 template string syntax."]],["li",["p",["a",{title:null,href:"https://github.com/emotion-js/emotion"},"Emotion"],": Provides a high-performance and flexible API for writing CSS."]],["li",["p",["a",{title:null,href:"https://github.com/cssinjs/jss"},"JSS"],": Defines styles through JavaScript objects and dynamically injects them into the DOM."]]],["p","According to the official website of React-Native,"],["blockquote",["p","With React Native, you style your application using JavaScript. "],["p","As a component grows in complexity, it is often cleaner to use ",["code","StyleSheet.create"]," to define several styles in one place."],["p",["a",{title:null,href:"https://reactnative.dev/docs/style"},"via"]]],["p","Hereâ€™s a basic example:"],["pre",{lang:"jsx",highlighted:'<span class="token keyword">const</span> Button <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> children <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token punctuation">(</span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>TouchableHighlight</span> <span class="token attr-name">style</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>styles<span class="token punctuation">.</span>myButton<span class="token punctuation">}</span></span><span class="token punctuation">></span></span>\n      <span class="token punctuation">{</span>children<span class="token punctuation">}</span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>TouchableHighlight</span><span class="token punctuation">></span></span>\n  <span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">const</span> styles <span class="token operator">=</span> StyleSheet<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  myButton<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    height<span class="token punctuation">:</span> <span class="token number">47</span><span class="token punctuation">,</span>\n    backgroundColor<span class="token punctuation">:</span> <span class="token string">\'#108ee9\'</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>'},["code","const Button = ({ children }) => {\n  return (\n    <TouchableHighlight style={styles.myButton}>\n      {children}\n    </TouchableHighlight>\n  )\n}\n\nconst styles = StyleSheet.create({\n  myButton: {\n    height: 47,\n    backgroundColor: '#108ee9',\n  },\n})"]],["p","This is natural and can only support CSS-in-JS."],["p","The design of ",["code","StyleSheet.create"]," is similar to ",["a",{title:null,href:"https://cssinjs.org/react-jss?v=v10.10.1"},"react-jss"],", which belongs to the JSS (JavaScript Style Sheets) category in CSS-in-JS. They have the following advantages:"],["h3","Dynamic values"],["p","Create a ",["code","useStyles"]," hook function that receives a props object and returns an object from ",["code","StyleSheet.create"],"."],["p","This way, the props object from the component can be used in the style:"],["pre",{lang:"jsx",highlighted:'<span class="token keyword">const</span> Button <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">{</span>children<span class="token punctuation">,</span> <span class="token operator">...</span>props<span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> styles <span class="token operator">=</span> <span class="token function">useStyles</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span>\n  <span class="token keyword">return</span> <span class="token punctuation">(</span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>TouchableHighlight</span> <span class="token attr-name">style</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>styles<span class="token punctuation">.</span>myButton<span class="token punctuation">}</span></span><span class="token punctuation">></span></span>\n      <span class="token punctuation">{</span>children<span class="token punctuation">}</span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>TouchableHighlight</span><span class="token punctuation">></span></span>\n  <span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment" spellcheck="true">// create useStyles hooks</span>\n<span class="token keyword">const</span> useStyles <span class="token operator">=</span> <span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span>\n  StyleSheet<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n    myButton<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n      height<span class="token punctuation">:</span> props<span class="token punctuation">.</span>height<span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// From the component\'s `height` prop</span>\n      backgroundColor<span class="token punctuation">:</span> <span class="token string">\'#108ee9\'</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span>'},["code","const Button = ({children, ...props}) => {\n  const styles = useStyles(props)\n  return (\n    <TouchableHighlight style={styles.myButton}>\n      {children}\n    </TouchableHighlight>\n  )\n}\n\n// create useStyles hooks\nconst useStyles = (props) =>\n  StyleSheet.create({\n    myButton: {\n      height: props.height, // From the component's `height` prop\n      backgroundColor: '#108ee9',\n    },\n  })"]],["h3","Theming"],["p","The idea is that you define a theme, wrap your application with ",["code","ThemeContext.Provider"]," and pass the theme object to ",["code","ThemeContext.Provider"],". "],["p","Then create a ",["code","useTheme"]," hook function that returns ",["code","theme"]," object and receives ",["code","theme"]," object to ",["code","useStyles"]," hook function."],["pre",{lang:"jsx",highlighted:'<span class="token keyword">const</span> Button <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> children<span class="token punctuation">,</span> <span class="token operator">...</span>props <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> theme <span class="token operator">=</span> <span class="token function">useTheme</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n  <span class="token keyword">const</span> styles <span class="token operator">=</span> <span class="token function">useStyles</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token operator">...</span>props<span class="token punctuation">,</span> theme<span class="token punctuation">}</span><span class="token punctuation">)</span>\n  <span class="token keyword">return</span> <span class="token punctuation">(</span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>TouchableHighlight</span> <span class="token attr-name">style</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>styles<span class="token punctuation">.</span>myButton<span class="token punctuation">}</span></span><span class="token punctuation">></span></span>\n      <span class="token punctuation">{</span>children<span class="token punctuation">}</span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>TouchableHighlight</span><span class="token punctuation">></span></span>\n  <span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">export</span> <span class="token keyword">const</span> App <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> theme <span class="token operator">=</span> <span class="token punctuation">{</span>\n    colorPrimary<span class="token punctuation">:</span> <span class="token string">\'#108ee9\'</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">return</span> <span class="token punctuation">(</span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ThemeContext.Provider</span> <span class="token attr-name">theme</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>theme<span class="token punctuation">}</span></span><span class="token punctuation">></span></span>\n      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Button</span> <span class="token attr-name">height</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token number">47</span><span class="token punctuation">}</span></span><span class="token punctuation">></span></span>I am a button<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Button</span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ThemeContext.Provider</span><span class="token punctuation">></span></span>\n  <span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment" spellcheck="true">// create ThemeContext &amp; useTheme hooks</span>\n<span class="token keyword">const</span> ThemeContext <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">createContext</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token keyword">const</span> useTheme <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> React<span class="token punctuation">.</span><span class="token function">useContext</span><span class="token punctuation">(</span>ThemeContext<span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n\n\n<span class="token comment" spellcheck="true">// useStyles hooks</span>\n<span class="token keyword">const</span> useStyles <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token operator">...</span>props<span class="token punctuation">,</span> theme<span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span>\n  StyleSheet<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n    myButton<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n      height<span class="token punctuation">:</span> props<span class="token punctuation">.</span>height<span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// From the component\'s `height` prop</span>\n      backgroundColor<span class="token punctuation">:</span> theme<span class="token punctuation">.</span>colorPrimary<span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// From `ThemeContext` variable</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span>'},["code","const Button = ({ children, ...props }) => {\n  const theme = useTheme()\n  const styles = useStyles({...props, theme})\n  return (\n    <TouchableHighlight style={styles.myButton}>\n      {children}\n    </TouchableHighlight>\n  )\n}\n\nexport const App = () => {\n  const theme = {\n    colorPrimary: '#108ee9',\n  }\n  return (\n    <ThemeContext.Provider theme={theme}>\n      <Button height={47}>I am a button</Button>\n    </ThemeContext.Provider>\n  )\n}\n\n// create ThemeContext & useTheme hooks\nconst ThemeContext = React.createContext({})\nconst useTheme = () => {\n  return React.useContext(ThemeContext)\n}\n\n\n// useStyles hooks\nconst useStyles = ({...props, theme}) =>\n  StyleSheet.create({\n    myButton: {\n      height: props.height, // From the component's `height` prop\n      backgroundColor: theme.colorPrimary, // From `ThemeContext` variable\n    },\n  })"]],["h2","Dilemma of CSS-in-JS"],["p","When we want to add ",["code","padding"]," style to the Button component externally, we need to redesign the Button component and modify the internal source code:"],["pre",{lang:"diff",highlighted:'export const App = () => {\n  return (\n<span class="token deleted">-    &lt;Button>I am a button&lt;/Button></span>\n<span class="token inserted">+    &lt;Button padding={7}>I am a button&lt;/Button></span>\n  )\n}\n\nconst useStyles = (props) =>\n  StyleSheet.create({\n    myButton: {\n      height: props.height,\n<span class="token inserted">+      padding: props.padding</span>\n    },\n  })'},["code","export const App = () => {\n  return (\n-    <Button>I am a button</Button>\n+    <Button padding={7}>I am a button</Button>\n  )\n}\n\nconst useStyles = (props) =>\n  StyleSheet.create({\n    myButton: {\n      height: props.height,\n+      padding: props.padding\n    },\n  })"]],["p","The general plan is:"],["ol",["li",["p","Add enough style class props"]],["li",["p","Add enough token css variables"]]],["p","This is an unforeseeable increase in maintenance costs. So how can we achieve external style overrides like CSS?"],["h2","What is styles?"],["p","Support for CSS style overrides via the ",["code","styles"]," prop (pseudocode), to avoid excessive props design that is not part of the core logic of a component."],["pre",{lang:"jsx",highlighted:'<span class="token comment" spellcheck="true">/**\n * @params   styles = { myButton: { padding } }\n * const baseStyles = { myButton: { height } }\n *\n * @return { myButton: [{ height }, { padding }] }\n * **/</span>\n<span class="token keyword">const</span> useStyles <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token operator">...</span>props<span class="token punctuation">,</span> styles<span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> baseStyles <span class="token operator">=</span> StyleSheet<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n    myButton<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n      height<span class="token punctuation">:</span> props<span class="token punctuation">.</span>height<span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span>\n\n  <span class="token comment" spellcheck="true">// Similar to lodash.mergesWidth</span>\n  <span class="token keyword">return</span> _<span class="token punctuation">.</span><span class="token function">mergeWidth</span><span class="token punctuation">(</span>baseStyles<span class="token punctuation">,</span> styles<span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n\n\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Button</span> <span class="token attr-name">styles</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span> myButton<span class="token punctuation">:</span> <span class="token punctuation">{</span> padding<span class="token punctuation">:</span> <span class="token number">7</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span></span><span class="token attr-name">}</span><span class="token punctuation">></span></span>\n    I am a button\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Button</span><span class="token punctuation">></span></span>'},["code","/**\n * @params   styles = { myButton: { padding } }\n * const baseStyles = { myButton: { height } }\n *\n * @return { myButton: [{ height }, { padding }] }\n * **/\nconst useStyles = ({...props, styles}) => {\n  const baseStyles = StyleSheet.create({\n    myButton: {\n      height: props.height,\n    },\n  })\n\n  // Similar to lodash.mergesWidth\n  return _.mergeWidth(baseStyles, styles)\n}\n\n\n<Button styles={{ myButton: { padding: 7 } }}>\n    I am a button\n</Button>"]],["ul",["li",["p","Q: So what is ",["code","styles"],", Why is every component of ",["code","@ant-design/react-native"]," designed with such a property?"]],["li",["p","A: ",["code","styles"]," is a collection of styles for a components, and can override all styles of the component. But it also strengthens the existence of CSS Class Names"]]],["h2","Demonstration (teaching)"],["p","Take ",["code","<Picker>"]," as an example"],["p","First step: we need know all the style class names of Picker (",["a",{title:null,href:"(/components/picker/#pickerstyle-interface)"},"provided in the document"],")"],["pre",{lang:"ts",highlighted:'<span class="token keyword">interface</span> <span class="token class-name">PickerViewStyle</span> <span class="token punctuation">{</span>\n  wrappper<span class="token punctuation">:</span> ViewStyle\n  wheelWrapper<span class="token punctuation">:</span> ViewStyle\n\n   <span class="token comment" spellcheck="true">// item style</span>\n  itemWrap<span class="token punctuation">:</span> ViewStyle\n  itemStyle<span class="token punctuation">:</span> TextStyle\n  itemActiveStyle<span class="token punctuation">:</span> TextStyle\n\n  <span class="token comment" spellcheck="true">// Mask View</span>\n  mask<span class="token punctuation">:</span> ViewStyle\n  maskTop<span class="token punctuation">:</span> ViewStyle\n  maskMiddle<span class="token punctuation">:</span> ViewStyle\n  maskBottom<span class="token punctuation">:</span> ViewStyle\n<span class="token punctuation">}</span>\n\n<span class="token keyword">interface</span> <span class="token class-name">PickerStyle</span> <span class="token keyword">extends</span> <span class="token class-name">Partial</span><span class="token operator">&lt;</span>PickerViewStyle<span class="token operator">></span> <span class="token punctuation">{</span>\n  <span class="token comment" spellcheck="true">// modal style</span>\n  modal<span class="token punctuation">:</span> ViewStyle\n  container<span class="token punctuation">:</span> ViewStyle\n  header<span class="token punctuation">:</span> ViewStyle\n  headerItem<span class="token punctuation">:</span> ViewStyle\n  actionText<span class="token punctuation">:</span> TextStyle\n  title<span class="token punctuation">:</span> TextStyle\n  okText<span class="token punctuation">:</span> TextStyle\n  dismissText<span class="token punctuation">:</span> TextStyle\n<span class="token punctuation">}</span>'},["code","interface PickerViewStyle {\n  wrappper: ViewStyle\n  wheelWrapper: ViewStyle\n\n   // item style\n  itemWrap: ViewStyle\n  itemStyle: TextStyle\n  itemActiveStyle: TextStyle\n\n  // Mask View\n  mask: ViewStyle\n  maskTop: ViewStyle\n  maskMiddle: ViewStyle\n  maskBottom: ViewStyle\n}\n\ninterface PickerStyle extends Partial<PickerViewStyle> {\n  // modal style\n  modal: ViewStyle\n  container: ViewStyle\n  header: ViewStyle\n  headerItem: ViewStyle\n  actionText: TextStyle\n  title: TextStyle\n  okText: TextStyle\n  dismissText: TextStyle\n}"]],["p","You can use the ",["a",{title:null,href:"https://chrome.google.com/webstore/detail/fmkadmapgofadopljbjfkapdkoienihi"},"React Developer Tools"]," browser plug-in to locate DOM information."],["p",["img",{src:"https://luokun.oss-cn-hangzhou.aliyuncs.com/github/8211723121784_.pic.jpg",width:"700"}]],["p","Step 2: Set the ",["code","styles"]," property"],["pre",{lang:"jsx",highlighted:'<span class="token comment" spellcheck="true">// It is recommended to use useMemo to cache variables</span>\n<span class="token keyword">const</span> styles <span class="token operator">=</span> <span class="token function">useMemo</span><span class="token punctuation">(</span>\n  <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span><span class="token punctuation">{</span>\n    itemActiveStyle<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n      color<span class="token punctuation">:</span> <span class="token string">\'#108ee9\'</span><span class="token punctuation">,</span>\n      fontWeight<span class="token punctuation">:</span> <span class="token string">\'bold\'</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    mask<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n      paddingHorizontal<span class="token punctuation">:</span> <span class="token number">10</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    maskMiddle<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n      backgroundColor<span class="token punctuation">:</span> <span class="token string">\'rgba(51,51,51,0.1)\'</span><span class="token punctuation">,</span>\n      borderRadius<span class="token punctuation">:</span> <span class="token number">10</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n<span class="token punctuation">)</span>\n\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Picker</span> \n  <span class="token attr-name">styles</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>styles<span class="token punctuation">}</span></span>\n<span class="token punctuation">></span></span>\n<span class="token operator">...</span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Picker</span><span class="token punctuation">></span></span>'},["code","// It is recommended to use useMemo to cache variables\nconst styles = useMemo(\n  () => ({\n    itemActiveStyle: {\n      color: '#108ee9',\n      fontWeight: 'bold',\n    },\n    mask: {\n      paddingHorizontal: 10,\n    },\n    maskMiddle: {\n      backgroundColor: 'rgba(51,51,51,0.1)',\n      borderRadius: 10,\n    },\n  }),\n  [],\n)\n\n<Picker \n  styles={styles}\n>\n...\n</Picker>"]],["table",["thead",["tr",["th","Base Style"],["th","Custom Style"]]],["tbody",["tr",["td",["img",{src:"https://luokun.oss-cn-hangzhou.aliyuncs.com/github/picker-old.png",width:"500"}]],["td",["img",{src:"https://luokun.oss-cn-hangzhou.aliyuncs.com/github/picker-new-style.jpg",width:"500"}]]]]],["h2","The End"],["blockquote",["p","discussions:  ",["a",{title:null,href:"https://github.com/ant-design/ant-design-mobile-rn/discussions/1368"},"https://github.com/ant-design/ant-design-mobile-rn/discussions/1368"]]]],meta:{category:"Blog",title:"What is styles?",author:"1uokun",date:"2024-08-08T00:00:00.000Z",filename:"docs/blog/what-is-styles.en-US.md"}}}}]);