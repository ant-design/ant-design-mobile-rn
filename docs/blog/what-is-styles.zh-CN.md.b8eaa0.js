(self.webpackChunk_ant_design_react_native=self.webpackChunk_ant_design_react_native||[]).push([[7065],{79446:n=>{n.exports={content:["article",["p","2024-08-08 ",["a",{title:null,href:"https://github.com/1uokun"},"@1uokun"]],["h2","CSS-in-JS是什么？"],["p","在聊",["code","styles"],"是什么之前，我们先简单了解CSS-in-JS是什么？"],["p","CSS-in-JS是一种将CSS样式直接编写在JavaScript代码中的技术，使得开发者能够在JavaScript文件中定义和使用样式。"],["p","常见的CSS-in-JS库包括："],["ul",["li",["p",["a",{title:null,href:"https://github.com/styled-components/styled-components"},"Styled-Components"],": 允许你使用ES6的模板字符串语法定义样式。"]],["li",["p",["a",{title:null,href:"https://github.com/emotion-js/emotion"},"Emotion"],": 提供了高性能和灵活的API来写CSS。"]],["li",["p",["a",{title:null,href:"https://github.com/cssinjs/jss"},"JSS"],": 通过JavaScript对象定义样式，并将其动态注入到DOM中。"]]],["p","而React-Native根据官网描述，"],["blockquote",["p","在React-native中，样式是通过JavaScript来实现的，所有的核心组件都接受名为style的属性。"],["p","为应对实际开发中组件的样式会越来越复杂，建议使用",["code","StyleSheet.create"],"来集中定义组件的样式。"],["p",["a",{title:null,href:"https://reactnative.dev/docs/style"},"via"]]],["p","举一个基础案例："],["pre",{lang:"jsx",highlighted:'<span class="token keyword">const</span> Button <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> children <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token punctuation">(</span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>TouchableHighlight</span> <span class="token attr-name">style</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>styles<span class="token punctuation">.</span>myButton<span class="token punctuation">}</span></span><span class="token punctuation">></span></span>\n      <span class="token punctuation">{</span>children<span class="token punctuation">}</span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>TouchableHighlight</span><span class="token punctuation">></span></span>\n  <span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">const</span> styles <span class="token operator">=</span> StyleSheet<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  myButton<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    height<span class="token punctuation">:</span> <span class="token number">47</span><span class="token punctuation">,</span>\n    backgroundColor<span class="token punctuation">:</span> <span class="token string">\'#108ee9\'</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>'},["code","const Button = ({ children }) => {\n  return (\n    <TouchableHighlight style={styles.myButton}>\n      {children}\n    </TouchableHighlight>\n  )\n}\n\nconst styles = StyleSheet.create({\n  myButton: {\n    height: 47,\n    backgroundColor: '#108ee9',\n  },\n})"]],["p","这就是天生的且只能支持CSS-in-JS了。"],["p","其中",["code","StyleSheet.create"],"的设计是类似于",["a",{title:null,href:"https://cssinjs.org/react-jss?v=v10.10.1"},"react-jss"],"，属于CSS-in-JS中的JSS（JavaScript Style Sheets）一类，他们有着以下的优势："],["h3","动态值"],["p","创建一个 ",["code","useStyles"]," hook函数，接收一个props对象，并返回",["code","StyleSheet.create"],"的对象。"],["p","这样样式中就可以使用来自组件props对象："],["pre",{lang:"jsx",highlighted:'<span class="token keyword">const</span> Button <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">{</span>children<span class="token punctuation">,</span> <span class="token operator">...</span>props<span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> styles <span class="token operator">=</span> <span class="token function">useStyles</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span>\n  <span class="token keyword">return</span> <span class="token punctuation">(</span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>TouchableHighlight</span> <span class="token attr-name">style</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>styles<span class="token punctuation">.</span>myButton<span class="token punctuation">}</span></span><span class="token punctuation">></span></span>\n      <span class="token punctuation">{</span>children<span class="token punctuation">}</span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>TouchableHighlight</span><span class="token punctuation">></span></span>\n  <span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment" spellcheck="true">// create useStyles hooks</span>\n<span class="token keyword">const</span> useStyles <span class="token operator">=</span> <span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span>\n  StyleSheet<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n    myButton<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n      height<span class="token punctuation">:</span> props<span class="token punctuation">.</span>height<span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 来自组件的 `height` prop</span>\n      backgroundColor<span class="token punctuation">:</span> <span class="token string">\'#108ee9\'</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span>'},["code","const Button = ({children, ...props}) => {\n  const styles = useStyles(props)\n  return (\n    <TouchableHighlight style={styles.myButton}>\n      {children}\n    </TouchableHighlight>\n  )\n}\n\n// create useStyles hooks\nconst useStyles = (props) =>\n  StyleSheet.create({\n    myButton: {\n      height: props.height, // 来自组件的 `height` prop\n      backgroundColor: '#108ee9',\n    },\n  })"]],["h3","主题化"],["p","使用Context统一维护所有主题变量（",["code","ThemeContext"],"），即用",["code","ThemeContext.Provider"],"包装你的应用程序并将theme对象传递给",["code","ThemeContext.Provider"],"。"],["p","随后创建一个 ",["code","useTheme"]," hook函数，返回theme对像；同时将theme对象也入参到 ",["code","useStyles"]," hook函数中。"],["pre",{lang:"jsx",highlighted:'<span class="token keyword">const</span> Button <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> children<span class="token punctuation">,</span> <span class="token operator">...</span>props <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> theme <span class="token operator">=</span> <span class="token function">useTheme</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n  <span class="token keyword">const</span> styles <span class="token operator">=</span> <span class="token function">useStyles</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token operator">...</span>props<span class="token punctuation">,</span> theme<span class="token punctuation">}</span><span class="token punctuation">)</span>\n  <span class="token keyword">return</span> <span class="token punctuation">(</span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>TouchableHighlight</span> <span class="token attr-name">style</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>styles<span class="token punctuation">.</span>myButton<span class="token punctuation">}</span></span><span class="token punctuation">></span></span>\n      <span class="token punctuation">{</span>children<span class="token punctuation">}</span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>TouchableHighlight</span><span class="token punctuation">></span></span>\n  <span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">export</span> <span class="token keyword">const</span> App <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> theme <span class="token operator">=</span> <span class="token punctuation">{</span>\n    colorPrimary<span class="token punctuation">:</span> <span class="token string">\'#108ee9\'</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">return</span> <span class="token punctuation">(</span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ThemeContext.Provider</span> <span class="token attr-name">theme</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>theme<span class="token punctuation">}</span></span><span class="token punctuation">></span></span>\n      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Button</span> <span class="token attr-name">height</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token number">47</span><span class="token punctuation">}</span></span><span class="token punctuation">></span></span>I am a button<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Button</span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ThemeContext.Provider</span><span class="token punctuation">></span></span>\n  <span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment" spellcheck="true">// create ThemeContext &amp; useTheme hooks</span>\n<span class="token keyword">const</span> ThemeContext <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">createContext</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token keyword">const</span> useTheme <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> React<span class="token punctuation">.</span><span class="token function">useContext</span><span class="token punctuation">(</span>ThemeContext<span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n\n\n<span class="token comment" spellcheck="true">// useStyles hooks</span>\n<span class="token keyword">const</span> useStyles <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token operator">...</span>props<span class="token punctuation">,</span> theme<span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span>\n  StyleSheet<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n    myButton<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n      height<span class="token punctuation">:</span> props<span class="token punctuation">.</span>height<span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 来自组件的 height prop</span>\n      backgroundColor<span class="token punctuation">:</span> theme<span class="token punctuation">.</span>colorPrimary<span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 来自ThemeContext变量</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span>'},["code","const Button = ({ children, ...props }) => {\n  const theme = useTheme()\n  const styles = useStyles({...props, theme})\n  return (\n    <TouchableHighlight style={styles.myButton}>\n      {children}\n    </TouchableHighlight>\n  )\n}\n\nexport const App = () => {\n  const theme = {\n    colorPrimary: '#108ee9',\n  }\n  return (\n    <ThemeContext.Provider theme={theme}>\n      <Button height={47}>I am a button</Button>\n    </ThemeContext.Provider>\n  )\n}\n\n// create ThemeContext & useTheme hooks\nconst ThemeContext = React.createContext({})\nconst useTheme = () => {\n  return React.useContext(ThemeContext)\n}\n\n\n// useStyles hooks\nconst useStyles = ({...props, theme}) =>\n  StyleSheet.create({\n    myButton: {\n      height: props.height, // 来自组件的 height prop\n      backgroundColor: theme.colorPrimary, // 来自ThemeContext变量\n    },\n  })"]],["h2","CSS-in-JS 的困境"],["p","当我们想在外部为Button组件添加",["code","padding"],"样式时，需要重新设计Button组件，改动内部的源码:"],["pre",{lang:"diff",highlighted:'export const App = () => {\n  return (\n<span class="token deleted">-    &lt;Button>I am a button&lt;/Button></span>\n<span class="token inserted">+    &lt;Button padding={7}>I am a button&lt;/Button></span>\n  )\n}\n\nconst useStyles = (props) =>\n  StyleSheet.create({\n    myButton: {\n      height: props.height,\n<span class="token inserted">+      padding: props.padding</span>\n    },\n  })'},["code","export const App = () => {\n  return (\n-    <Button>I am a button</Button>\n+    <Button padding={7}>I am a button</Button>\n  )\n}\n\nconst useStyles = (props) =>\n  StyleSheet.create({\n    myButton: {\n      height: props.height,\n+      padding: props.padding\n    },\n  })"]],["p","大致方案为："],["ol",["li",["p","添加足量的style类props"]],["li",["p","添加足量的token css变量"]]],["p","这是可以遇见的徒增维护成本。那么如何实现像CSS那样可以用外部样式覆盖呢？"],["h2","styles是什么？"],["p","通过",["code","styles"],"一个prop来支持实现CSS样式覆盖的能力（以下为简易后的代码，实际会做一些性能优化和边际保护），避免过多的非组件核心逻辑的props设计。"],["pre",{lang:"jsx",highlighted:'<span class="token comment" spellcheck="true">/**\n * @params   styles = { myButton: { padding } }\n * const baseStyles = { myButton: { height } }\n *\n * @return { myButton: [{ height }, { padding }] }\n * **/</span>\n<span class="token keyword">const</span> useStyles <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token operator">...</span>props<span class="token punctuation">,</span> styles<span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> baseStyles <span class="token operator">=</span> StyleSheet<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n    myButton<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n      height<span class="token punctuation">:</span> props<span class="token punctuation">.</span>height<span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span>\n\n  <span class="token comment" spellcheck="true">// 类似 lodash.mergesWidth</span>\n  <span class="token keyword">return</span> _<span class="token punctuation">.</span><span class="token function">mergeWidth</span><span class="token punctuation">(</span>baseStyles<span class="token punctuation">,</span> styles<span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n\n\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Button</span> <span class="token attr-name">styles</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span> myButton<span class="token punctuation">:</span> <span class="token punctuation">{</span> padding<span class="token punctuation">:</span> <span class="token number">7</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span></span><span class="token attr-name">}</span><span class="token punctuation">></span></span>\n    I am a button\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Button</span><span class="token punctuation">></span></span>'},["code","/**\n * @params   styles = { myButton: { padding } }\n * const baseStyles = { myButton: { height } }\n *\n * @return { myButton: [{ height }, { padding }] }\n * **/\nconst useStyles = ({...props, styles}) => {\n  const baseStyles = StyleSheet.create({\n    myButton: {\n      height: props.height,\n    },\n  })\n\n  // 类似 lodash.mergesWidth\n  return _.mergeWidth(baseStyles, styles)\n}\n\n\n<Button styles={{ myButton: { padding: 7 } }}>\n    I am a button\n</Button>"]],["ul",["li",["p","Q：为此",["code","styles"],"是什么，为什么",["code","@ant-design/react-native"],"的每个组件都被设计了这么一个属性呢？"]],["li",["p","A：",["code","styles"],"就是支持组件相同的样式集合，能覆盖组件的所有样式，但是也强化了类似CSS样式类名的存在。"]]],["h2","实战"],["p","以 ",["code","<Picker>"]," 为例，"],["p","第一步，我们需要聚焦Picker的样式类名(",["a",{title:null,href:"/components/picker-cn/#pickerstyle-语义化样式"},"文档"],"中有提供)"],["pre",{lang:"ts",highlighted:'<span class="token keyword">interface</span> <span class="token class-name">PickerViewStyle</span> <span class="token punctuation">{</span>\n  wrappper<span class="token punctuation">:</span> ViewStyle\n  wheelWrapper<span class="token punctuation">:</span> ViewStyle\n\n   <span class="token comment" spellcheck="true">// item style</span>\n  itemWrap<span class="token punctuation">:</span> ViewStyle\n  itemStyle<span class="token punctuation">:</span> TextStyle\n\n  <span class="token comment" spellcheck="true">// 遮罩层</span>\n  mask<span class="token punctuation">:</span> ViewStyle\n  maskTop<span class="token punctuation">:</span> ViewStyle\n  maskMiddle<span class="token punctuation">:</span> ViewStyle\n  maskBottom<span class="token punctuation">:</span> ViewStyle\n<span class="token punctuation">}</span>\n\n<span class="token keyword">interface</span> <span class="token class-name">PickerStyle</span> <span class="token keyword">extends</span> <span class="token class-name">Partial</span><span class="token operator">&lt;</span>PickerViewStyle<span class="token operator">></span> <span class="token punctuation">{</span>\n  <span class="token comment" spellcheck="true">// modal 相关的样式</span>\n  modal<span class="token punctuation">:</span> ViewStyle\n  container<span class="token punctuation">:</span> ViewStyle\n  header<span class="token punctuation">:</span> ViewStyle\n  headerItem<span class="token punctuation">:</span> ViewStyle\n  actionText<span class="token punctuation">:</span> TextStyle\n  title<span class="token punctuation">:</span> TextStyle\n  okText<span class="token punctuation">:</span> TextStyle\n  dismissText<span class="token punctuation">:</span> TextStyle\n<span class="token punctuation">}</span>'},["code","interface PickerViewStyle {\n  wrappper: ViewStyle\n  wheelWrapper: ViewStyle\n\n   // item style\n  itemWrap: ViewStyle\n  itemStyle: TextStyle\n\n  // 遮罩层\n  mask: ViewStyle\n  maskTop: ViewStyle\n  maskMiddle: ViewStyle\n  maskBottom: ViewStyle\n}\n\ninterface PickerStyle extends Partial<PickerViewStyle> {\n  // modal 相关的样式\n  modal: ViewStyle\n  container: ViewStyle\n  header: ViewStyle\n  headerItem: ViewStyle\n  actionText: TextStyle\n  title: TextStyle\n  okText: TextStyle\n  dismissText: TextStyle\n}"]],["p","可以借助",["a",{title:null,href:"https://chrome.google.com/webstore/detail/fmkadmapgofadopljbjfkapdkoienihi"},"React Developer Tools"],"浏览器插件定位DOM信息"],["p",["img",{src:"https://luokun.oss-cn-hangzhou.aliyuncs.com/github/8211723121784_.pic.jpg",width:"700"}]],["p","第二步，设置",["code","styles"],"属性"],["pre",{lang:"jsx",highlighted:'<span class="token comment" spellcheck="true">// 建议使用 useMemo 缓存变量</span>\n<span class="token keyword">const</span> styles <span class="token operator">=</span> <span class="token function">useMemo</span><span class="token punctuation">(</span>\n  <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span><span class="token punctuation">{</span>\n    itemActiveStyle<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n      color<span class="token punctuation">:</span> <span class="token string">\'#108ee9\'</span><span class="token punctuation">,</span>\n      fontWeight<span class="token punctuation">:</span> <span class="token string">\'bold\'</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    mask<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n      paddingHorizontal<span class="token punctuation">:</span> <span class="token number">10</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    maskMiddle<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n      backgroundColor<span class="token punctuation">:</span> <span class="token string">\'rgba(51,51,51,0.1)\'</span><span class="token punctuation">,</span>\n      borderRadius<span class="token punctuation">:</span> <span class="token number">10</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n<span class="token punctuation">)</span>\n\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Picker</span> \n  <span class="token attr-name">styles</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>styles<span class="token punctuation">}</span></span>\n<span class="token punctuation">></span></span>\n<span class="token operator">...</span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Picker</span><span class="token punctuation">></span></span>'},["code","// 建议使用 useMemo 缓存变量\nconst styles = useMemo(\n  () => ({\n    itemActiveStyle: {\n      color: '#108ee9',\n      fontWeight: 'bold',\n    },\n    mask: {\n      paddingHorizontal: 10,\n    },\n    maskMiddle: {\n      backgroundColor: 'rgba(51,51,51,0.1)',\n      borderRadius: 10,\n    },\n  }),\n  [],\n)\n\n<Picker \n  styles={styles}\n>\n...\n</Picker>"]],["table",["thead",["tr",["th","基础样式"],["th","定制样式"]]],["tbody",["tr",["td",["img",{src:"https://luokun.oss-cn-hangzhou.aliyuncs.com/github/picker-old.png",width:"500"}]],["td",["img",{src:"https://luokun.oss-cn-hangzhou.aliyuncs.com/github/picker-new-style.jpg",width:"500"}]]]]],["h2","结尾"],["blockquote",["p","讨论区： ",["a",{title:null,href:"https://github.com/ant-design/ant-design-mobile-rn/discussions/1368"},"https://github.com/ant-design/ant-design-mobile-rn/discussions/1368"]]]],meta:{category:"Blog",title:"styles是什么？",author:"1uokun",date:"2024-08-08T00:00:00.000Z",filename:"docs/blog/what-is-styles.zh-CN.md"}}}}]);